/* Jesse Bosshardt SQL Lab */

/* 2.1 */
SELECT * 
FROM EMPLOYEE;

SELECT * 
FROM EMPLOYEE 
WHERE LASTNAME = 'King';

SELECT * 
FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO IS NULL;




/* 2.2 */
SELECT * 
FROM ALBUM
ORDER BY TITLE;

SELECT FIRSTNAME
FROM CUSTOMER 
ORDER BY CITY ASC;




/* 2.3 */
INSERT INTO GENRE VALUES (26, 'Smooooth Jazz');
INSERT INTO GENRE VALUES (27, 'Gregorian Chant');

INSERT INTO EMPLOYEE VALUES (9, 'Ross', 'Bob', 'Logo Artist',  1, '29-OCT-42', '13-JUN-01', '333 E Myhero St.', 'Bosstown', 'VA', 'USA', '12345', '+1 (536) 114-4412', '+1 (536) 432-6321', 'bobrossroxmysox@legend.com');
INSERT INTO EMPLOYEE VALUES (10, 'Einaudi', 'Ludovico', 'Minimalist',  1, '13-JUL-54', '13-JUN-07', 'Broken Dreams Blv.', 'Seattle', 'WA', 'USA', '54321', '+1 (360) 234-7940', '+1 (536) 657-1523', 'beautiful@legend.com');

INSERT INTO CUSTOMER VALUES (60, 'Tina', 'Williams', 'Co One', 'Chill St.', 'Bosstown', 'VA', 'USA', '12345', '+1 (192) 123-4567', '+1 (982) 765-4321', 'tina@gmail.com', 2);
INSERT INTO CUSTOMER VALUES (61, 'Lyle', 'Williams', 'Co One', 'Chill St.', 'Bosstown', 'VA', 'USA', '12345', '+1 (192) 123-3423', '+1 (982) 234-2612', 'lyle@gmail.com', 2);




/* 2.4 */
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';




/* 2.5 */
SELECT * 
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';




/* 2.6 */
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM EMPLOYEE 
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';



/* 2.7 */
DELETE
FROM INVOICELINE
WHERE INVOICEID IN
    (SELECT INVOICEID 
    FROM INVOICE
    WHERE CUSTOMERID IN
        (SELECT CUSTOMERID 
        FROM CUSTOMER 
        WHERE  FIRSTNAME || ' ' || LASTNAME = 'Robert Walter'));
    
DELETE
FROM INVOICE
WHERE CUSTOMERID IN
    (SELECT CUSTOMERID 
    FROM CUSTOMER 
    WHERE  FIRSTNAME || ' ' || LASTNAME = 'Robert Walter');
    
DELETE 
FROM CUSTOMER
WHERE FIRSTNAME || ' ' || LASTNAME = 'Robert Walter';
        


        
/* 3.1 */
CREATE OR REPLACE FUNCTION GET_DATE
RETURN DATE IS
BEGIN
    RETURN SYSDATE;
END;

CREATE OR REPLACE FUNCTION MEDIA_LENGTH (MEDIA_ID IN NUMBER)
RETURN INTEGER IS
V_LENGTH INTEGER;
BEGIN
    SELECT LENGTH(NAME)
    INTO V_LENGTH
    FROM MEDIATYPE WHERE 
    MEDIATYPEID = MEDIA_ID;
    
    RETURN V_LENGTH;
END;




/* 3.2 */
CREATE OR REPLACE FUNCTION AVG_TOTAL 
RETURN NUMBER IS
V_AVG_TOTAL NUMBER;
BEGIN
    SELECT AVG(TOTAL) 
    INTO V_AVG_TOTAL
    FROM INVOICE;
    
    RETURN V_AVG_TOTAL;
END;

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE
RETURN VARCHAR2 IS
V_MOST_EXPENSIVE VARCHAR2(2000);
BEGIN
    SELECT NAME
    INTO V_MOST_EXPENSIVE
    FROM TRACK 
    WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK) 
    AND ROWNUM = 1;
    
    RETURN V_MOST_EXPENSIVE;
END;




/* 3.3 */
CREATE OR REPLACE FUNCTION AVG_INVOICELINES
RETURN NUMBER IS
AVG_INVOICELINES NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) 
    INTO AVG_INVOICELINES
    FROM INVOICELINE;
    
    RETURN AVG_INVOICELINES;
END;




/* 3.4 */
CREATE OR REPLACE TYPE BORN_AFTER_COL AS OBJECT (
  NAME VARCHAR2(300)
);

CREATE OR REPLACE TYPE T_NESTED_BORN_AFTER AS TABLE OF BORN_AFTER_COL;

CREATE OR REPLACE FUNCTION BORN_AFTER 
RETURN T_NESTED_BORN_AFTER AS
V_TABLE   T_NESTED_BORN_AFTER;
BEGIN
    SELECT 
    CAST(
    MULTISET(
    SELECT FIRSTNAME || ' ' || LASTNAME
    FROM EMPLOYEE 
    WHERE BIRTHDATE > '1-JAN-1963')
    AS T_NESTED_BORN_AFTER)
    INTO V_TABLE
    FROM DUAL;
  
    RETURN V_TABLE;
END; 

SELECT * FROM TABLE(BORN_AFTER()); 




/* 4.1 */
CREATE OR REPLACE 
PROCEDURE FIRST_LAST_NAMES(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
      SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE; 
END;
    
DECLARE
S SYS_REFCURSOR;
SOME_FIRST EMPLOYEE.FIRSTNAME%TYPE;
SOME_LAST EMPLOYEE.LASTNAME%TYPE;
BEGIN
    FIRST_LAST_NAMES(S);
    
    LOOP
    FETCH S INTO SOME_FIRST, SOME_LAST;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(SOME_FIRST || ' ' || SOME_LAST);
    END LOOP;
END;
  
  
  
    
/* 4.2 */ 
CREATE OR REPLACE 
PROCEDURE UPDATE_EMPLOYEE(E_ID IN NUMBER, E_TITLE VARCHAR2, E_PHONE IN VARCHAR2)
IS
BEGIN
     UPDATE EMPLOYEE
     SET TITLE = E_TITLE, PHONE = E_PHONE
     WHERE EMPLOYEEID = E_ID;
END;

CREATE OR REPLACE 
PROCEDURE GET_MANAGER(E_ID IN NUMBER, MANAGER_NAME OUT VARCHAR2)
IS
BEGIN
    SELECT FIRSTNAME || ' ' || LASTNAME 
    INTO MANAGER_NAME
    FROM EMPLOYEE
    WHERE EMPLOYEEID = 
                    (SELECT REPORTSTO
                    FROM EMPLOYEE WHERE
                    EMPLOYEEID = E_ID);                    
END;

DECLARE
S SYS_REFCURSOR;
SOME_NAME VARCHAR2(200);
BEGIN
    GET_MANAGER(7, SOME_NAME);
    DBMS_OUTPUT.PUT_LINE(SOME_NAME);
END;
 
 
 

/* 4.3 */    
CREATE OR REPLACE PROCEDURE GET_COMPANY(C_ID IN NUMBER, C_NAME OUT VARCHAR2, C_COMPANY OUT VARCHAR2 )
IS
BEGIN
    SELECT FIRSTNAME || ' ' || LASTNAME, COMPANY
    INTO C_NAME, C_COMPANY
    FROM CUSTOMER WHERE
    CUSTOMERID = C_ID;
END;

DECLARE
S SYS_REFCURSOR;
SOME_NAME VARCHAR2(200);
SOME_COMPANY VARCHAR2(200);
BEGIN
    GET_COMPANY(1, SOME_NAME, SOME_COMPANY);
    DBMS_OUTPUT.PUT_LINE(SOME_NAME || ' works at ' || SOME_COMPANY);
END;
 
 
 
 
/* 5.1 */
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(I_ID IN NUMBER)
IS
BEGIN
    SAVEPOINT SP;
    
    DELETE
    FROM INVOICELINE
    WHERE INVOICEID =
        (SELECT INVOICEID 
        FROM INVOICE
        WHERE INVOICEID = I_ID);
    
    DELETE
    FROM INVOICE
    WHERE INVOICEID = I_ID;
    
    COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('FAILED');
        ROLLBACK;

END;   


CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(C_ID IN NUMBER, C_FIRST IN VARCHAR2, C_LAST IN VARCHAR2, C_EMAIL IN VARCHAR2 )
IS
BEGIN
    SAVEPOINT SP;
    
    INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (C_ID, C_FIRST, C_LAST, C_EMAIL);
    COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('FAILED');
        ROLLBACK;

END;   




/* 6.1 */
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('A new person was added'); 
END;




/* 6.2 */
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('An album was updated'); 
END;




/* 6.3 */
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('A customer was deleted'); 
END;




/* 7.1 */
SELECT FIRSTNAME || ' ' || LASTNAME, INVOICEID
FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;




/* 7.2 */
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;




/* 7.3 */ 
SELECT NAME, TITLE
FROM ALBUM RIGHT JOIN ARTIST 
ON ALBUM.ARTISTID = ARTIST.ARTISTID; 




/* 7.4 */
SELECT * 
FROM ALBUM CROSS JOIN ARTIST
ORDER BY NAME ASC;




/* 7.5 */
SELECT *
FROM EMPLOYEE E1 INNER JOIN EMPLOYEE E2
ON E1.REPORTSTO = E2.REPORTSTO;