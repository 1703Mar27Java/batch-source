/****2.0 SQL QUERIES****/

/*2.1 SELECT*/
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

/*2.2 ORDER BY*/
SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME, CITY FROM CUSTOMER ORDER BY CITY ASC;

/*2.3 INSERT INTO*/
INSERT INTO GENRE(GENREID, NAME)
VALUES(26, 'Math Rock');
INSERT INTO GENRE(GENREID, NAME)
VALUES(27, 'Shoegaze');

INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (9, 'Jade', 'Garcia');
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (10, 'Joe', 'Mamma');

INSERT INTO CUSTOMER(CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL)
VALUES(60, 'Jade', 'Garcia', 'jrenegarcia11@gmail.com');
INSERT INTO CUSTOMER(CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL)
VALUES(61, 'Joe', 'Momma', 'joemamma@aol.com');

/*2.4 UPDATE*/
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

/*2.5 LIKE*/
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/*2.6 BETWEEN*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE
BETWEEN TO_DATE('01-JUN-03', 'DD-MON-RR') 
AND TO_DATE('01-MAR-04', 'DD-MON-RR');

/*2.7 DELETE*/
ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID) REFERENCES INVOICE(INVOICEID)
ON DELETE CASCADE;

ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID)
ON DELETE CASCADE;

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/****3.0 FUNCIONS****/
/*3.1 SYSTEM DEFINE FUNCTIONS*/
CREATE OR REPLACE FUNCTION CURRENTIME
RETURN TIMESTAMP WITH TIME ZONE
IS CURRENTTIME TIMESTAMP WITH TIME ZONE;
BEGIN
  SELECT SYSTIMESTAMP INTO CURRENTTIME FROM DUAL;
  RETURN CURRENTTIME;
END;

DECLARE
  TYME TIMESTAMP WITH TIME ZONE;
BEGIN
  TYME := CURRENTIME();
  DBMS_OUTPUT.PUT_LINE('CURRENT TIME IS: '||TYME);
END;

CREATE OR REPLACE FUNCTION LENGTHOFMEDIATYPE(MEDIAID IN NUMBER)
RETURN NUMBER
IS
LENG NUMBER;
BEGIN
  SELECT LENGTH(MEDIATYPE.NAME) INTO LENG FROM MEDIATYPE WHERE MEDIAID=MEDIATYPEID;
  RETURN LENG;
END;

DECLARE
  LENG NUMBER;
  ID NUMBER;
BEGIN
  ID:=1;
  LENG := LENGTHOFMEDIATYPE(1);
  DBMS_OUTPUT.PUT_LINE('LENGTH OF MEDIATYPE '||ID||': '||LENG);
END;

/*3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS*/
CREATE OR REPLACE FUNCTION AVGINVOICETOTAL
RETURN NUMBER IS
AVGTOTAL NUMBER;
BEGIN
  SELECT AVG(TOTAL) INTO AVGTOTAL FROM INVOICE;
  RETURN AVGTOTAL;
END;

DECLARE
  AVERAGE NUMBER;
BEGIN
  AVERAGE:= AVGINVOICETOTAL();
  DBMS_OUTPUT.PUT_LINE('AVERAGE INVOICE TOTAL: '||AVERAGE);
END;

CREATE OR REPLACE FUNCTION MOSTEXPENSIVETRACK
RETURN NUMBER IS
EXPENSIVETRACK NUMBER;
BEGIN
  SELECT MAX(UNITPRICE) INTO EXPENSIVETRACK FROM TRACK;
  RETURN EXPENSIVETRACK;
END;

DECLARE
  EXPENSIVETRACK NUMBER;
BEGIN
  EXPENSIVETRACK:=MOSTEXPENSIVETRACK();
  DBMS_OUTPUT.PUT_LINE('MOST EXPENSIVE TRACK IS: '||EXPENSIVETRACK);
END;

/*3.3 USER DEFINED SCALAR FUNCTIONS*/
CREATE OR REPLACE FUNCTION AVGINVOICELINEPRICE
RETURN NUMBER IS
AVGPRICE NUMBER;
BEGIN
  SELECT AVG(UNITPRICE) INTO AVGPRICE FROM INVOICELINE;
  RETURN AVGPRICE;
END;

DECLARE
  AVERAGE NUMBER;
BEGIN
  AVERAGE:= AVGINVOICETOTAL();
  DBMS_OUTPUT.PUT_LINE('AVERAGE INVOICELINE PRICE: '||AVERAGE);
END;
/*3.4 USER DEFINED TABLE VALUE FUNCTIONS*/
CREATE OR REPLACE FUNCTION BORNAFTER1968
RETURN SYS_REFCURSOR IS
CURS SYS_REFCURSOR;
BEGIN
  OPEN CURS FOR
    SELECT FIRSTNAME, LASTNAME, BIRTHDATE FROM EMPLOYEE WHERE EXTRACT(YEAR FROM BIRTHDATE) > 1968;
  RETURN CURS;
END;

DECLARE
  S SYS_REFCURSOR;
  SOME_FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE; /*DEFLECTION*/
  SOME_LASTNAME EMPLOYEE.LASTNAME%TYPE;
  SOME_BIRTHDATE EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
  S := BORNAFTER1968();
  DBMS_OUTPUT.PUT_LINE('EMPLOYEES BORN AFTER 1968');
  LOOP
      FETCH S INTO SOME_FIRSTNAME, SOME_LASTNAME, SOME_BIRTHDATE;
      EXIT WHEN S%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('NAME: '||SOME_FIRSTNAME||' '||SOME_LASTNAME||' BIRTHDATE: '||SOME_BIRTHDATE);
  END LOOP;
  CLOSE S;
END;
/****4.0 STORED PROCEDURES****/
/*4.1 BASIC STORED PROCEDURE*/
CREATE OR REPLACE PROCEDURE FIRSTLASTNAME(S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;

/*4.2 STORED PROCEDURE INPUT PARAMETERS */
CREATE OR REPLACE PROCEDURE UPDATEINFO(ADDRESS IN VARCHAR2, CITY IN VARCHAR2, STATE IN VARCHAR2)
IS
BEGIN
  UPDATE EMPLOYEE SET EMPLOYEE.ADDRESS=ADDRESS, EMPLOYEE.CITY=CITY, EMPLOYEE.STATE=STATE;
END;

CREATE OR REPLACE PROCEDURE MANAGERSOFEMPLOYEE(ID IN NUMBER, S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
    SELECT E2.FIRSTNAME, E2.LASTNAME FROM EMPLOYEE E2 
    LEFT JOIN EMPLOYEE E1 ON E1.EMPLOYEEID=E2.REPORTSTO AND E1.EMPLOYEEID=ID;
END;

/*4.3 STORED PROCEDURE OUTPUT PARAMETERS*/
CREATE OR REPLACE PROCEDURE NAMEANDCOMPANY(ID IN NUMBER, S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER WHERE CUSTOMERID=ID;
END;

/****5.0 TRANSACTIONS****/
CREATE OR REPLACE PROCEDURE DELETEINVOICE(ID IN NUMBER)
IS
BEGIN
  DELETE FROM INVOICE WHERE ID=INVOICE.INVOICEID;
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE INSERTCUSTOMER(ID IN NUMBER, FN IN VARCHAR2, LN IN VARCHAR2, EM IN VARCHAR2)
IS
BEGIN
  INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES(ID,FN,LN,EM);
  COMMIT;
END;
/****6.0 TRIGGERS****/
/*6.1 AFTER/FOR*/
CREATE OR REPLACE TRIGGER NEWEMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
  DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE ADDED!');
END;

CREATE OR REPLACE TRIGGER NEWALBUM
AFTER INSERT ON ALBUM
BEGIN
  DBMS_OUTPUT.PUT_LINE('NEW ALBUM ADDED!');
END;

CREATE OR REPLACE TRIGGER NEWCUSTOMER
AFTER INSERT ON CUSTOMER
BEGIN
  DBMS_OUTPUT.PUT_LINE('NEW CUSTOMER ADDED!');
END;


/****7.0 JOINS****/
/*7.1 INNER*/
SELECT FIRSTNAME, INVOICE.INVOICEID FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/*7.2 OUTER*/
SELECT FIRSTNAME, LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL FROM CUSTOMER
LEFT JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/*7.3 RIGHT*/
SELECT ARTIST.NAME, ALBUM.TITLE FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

/*7.4 CROSS*/
SELECT * FROM ARTIST CROSS JOIN ALBUM WHERE ARTIST.ARTISTID = ALBUM.ARTISTID ORDER BY ARTIST.NAME ASC;

/*7.5 SELF*/
SELECT E2.FIRSTNAME, E2.LASTNAME, E2.REPORTSTO, E1.FIRSTNAME, E1.LASTNAME FROM EMPLOYEE E2 
LEFT JOIN EMPLOYEE E1 ON E1.EMPLOYEEID=E2.REPORTSTO; 