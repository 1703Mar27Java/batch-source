/*CREATING TABLES*/
CREATE TABLE BANK_ACCOUNT(
  BANK_ACCOUNTID NUMBER,
  USER_ID NUMBER,
  BANK_ACCOUNT_NAME VARCHAR2(40),
  BALANCE NUMBER,
  PRIMARY KEY (BANK_ACCOUNTID)
);

CREATE TABLE BANKUSER(
  USER_ID NUMBER(30),
  USER_NAME VARCHAR(30),
  PASS VARCHAR(30),
  SUPER NUMBER(1) DEFAULT 0,
  PRIMARY KEY (USER_ID)
);

/*CONSTRAINTS: FOREIGN KEY AND CHECK*/
ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_USER_ID
FOREIGN KEY (USER_ID) REFERENCES BANKUSER(USER_ID)
ON DELETE CASCADE;

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT CHK_POSITIVE_BALANCE
CHECK (BALANCE >= 0);

/*AUTO-GENERATED BANK_ACCOUNTID AND USER_ID*/
CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_USER_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW 
BEGIN
  SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.BANK_ACCOUNTID FROM DUAL; 
END;

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON BANKUSER
FOR EACH ROW 
BEGIN
  SELECT SQ_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL; 
END;



/******STORED PROCEDURES*******/

/**WITHDRAW AND DEPOSIT**/
CREATE OR REPLACE PROCEDURE WITHDRAW(AMT IN NUMBER, USERID IN NUMBER, ACCOUNTID IN NUMBER)
IS
BEGIN
  UPDATE BANK_ACCOUNT SET BALANCE=BALANCE-AMT WHERE USERID=BANK_ACCOUNT.USER_ID AND ACCOUNTID=BANK_ACCOUNT.BANK_ACCOUNTID;
  DBMS_OUTPUT.PUT_LINE('WITHDREW $'||AMT||' FROM BANK ACCOUNT '||ACCOUNTID);
END;

CREATE OR REPLACE PROCEDURE DEPOSIT(AMT IN NUMBER, USERID IN NUMBER, ACCOUNTID IN NUMBER)
IS
BEGIN
  UPDATE BANK_ACCOUNT SET BALANCE=BALANCE+AMT WHERE USERID=BANK_ACCOUNT.USER_ID AND ACCOUNTID=BANK_ACCOUNT.BANK_ACCOUNTID;
  DBMS_OUTPUT.PUT_LINE('DEPOSITED $'||AMT||' TO BANK ACCOUNT '||ACCOUNTID);
END;

/**CREATE USER AND BANK ACCOUNT**/
CREATE OR REPLACE PROCEDURE CREATE_USER(NAME IN VARCHAR2, PASS IN VARCHAR2, SUPER IN NUMBER)
IS
BEGIN
  INSERT INTO BANKUSER (USER_NAME, PASS, SUPER) VALUES (NAME, PASS, SUPER);
END;

CREATE OR REPLACE PROCEDURE CREATE_BANK_ACCOUNT(USERID IN NUMBER, ACCTNAME IN VARCHAR2, BAL IN NUMBER)
IS
BEGIN
  INSERT INTO BANK_ACCOUNT (USER_ID, BANK_ACCOUNT_NAME, BALANCE) VALUES (USERID, ACCTNAME, BAL);
END;

/**RETRIEVE USER AND BANK ACCOUNT**/
/*RETRIEVE USER BY ID*/
CREATE OR REPLACE PROCEDURE RETRIEVE_USER(ID IN NUMBER, S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
      SELECT * FROM BANKUSER WHERE BANKUSER.USER_ID=ID;
END;

/*RETRIEVE USER BY LOGIN*/
CREATE OR REPLACE PROCEDURE RETRIEVE_USER_LOGIN(USERNAME IN VARCHAR2, PASS IN VARCHAR2, S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
      SELECT * FROM BANKUSER WHERE BANKUSER.USER_NAME=USERNAME AND BANKUSER.PASS=PASS;
END;

/*RETRIEVE BANK ACCOUNT BY ID*/
CREATE OR REPLACE PROCEDURE RETRIEVE_BANK_ACCOUNT(ID IN NUMBER, S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
    SELECT * FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNTID=ID;
END;

/*RETRIEVE ALL OF USER'S BANK ACCOUNTS*/
CREATE OR REPLACE PROCEDURE RETRIEVE_ALL_ACCOUNTS(USERID IN NUMBER, S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
    SELECT * FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.USER_ID=USERID;
END;


/**UPDATE USER AND BANK ACCOUNT**/
create or replace PROCEDURE UPDATE_BANK_ACCOUNT(ACCOUNTID IN NUMBER, NAME2 IN VARCHAR2)
IS
BEGIN
  UPDATE BANK_ACCOUNT SET BANK_ACCOUNT.BANK_ACCOUNT_NAME=NAME2 WHERE BANK_ACCOUNT.BANK_ACCOUNTID=ACCOUNTID;
END;

CREATE OR REPLACE PROCEDURE UPDATE_USER_NAME(ID IN NUMBER, NAME IN VARCHAR2)
IS
BEGIN
  UPDATE BANKUSER SET BANKUSER.USER_NAME=NAME WHERE BANKUSER.USER_ID=ID;
END;

CREATE OR REPLACE PROCEDURE UPDATE_USER_PASS(ID IN NUMBER, PASSWRD IN VARCHAR2)
IS
BEGIN
  UPDATE BANKUSER SET BANKUSER.PASS=PASSWRD WHERE BANKUSER.USER_ID=ID;
END;

/**DELETE USER AND BANK ACCOUNT**/
CREATE OR REPLACE PROCEDURE DELETE_USER(ID IN NUMBER)
IS
BEGIN
  DELETE FROM BANKUSER WHERE BANKUSER.USER_ID=ID;
END;

CREATE OR REPLACE PROCEDURE DELETE_BANK_ACCOUNT(ID IN NUMBER)
IS
BEGIN
  DELETE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNTID=ID;
END;

