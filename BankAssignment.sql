CREATE TABLE USERS(

USER_ID INTEGER PRIMARY KEY,
USER_NAME VARCHAR2(2000) NOT NULL,
USER_PASSWORD VARCHAR2(2000) NOT NULL

)

CREATE TABLE BANK_ACCOUNT(
BANK_ACCOUNT_ID INTEGER PRIMARY KEY,
BANK_ACCOUNT_NUMBER INTEGER NOT NULL,
BANK_ACCOUNT_AMOUNT INTEGER,
CHECK(BANK_ACCOUNT_NUMBER>=0)

);

ALTER TABLE BANK_ACCOUNT
ADD USER_ID INTEGER NOT NULL;



ALTER TABLE BANK_ACCOUNT
ADD FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID);



--CREATE SEQUENCE FOR BEAR PRIMARY KEYS
CREATE SEQUENCE SQ_BEAR_PK
START WITH 1
INCREMENT BY 2;

--CREATE BEFORE INSERT TRIGGER FOR NEAR PRIMARY KEYS
CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
BEFORE INSERT ON BEAR
FOR EACH ROW
BEGIN
SELECT SQ_BEAR_PK.NEXTVAL INTO :new.BEAR_ID FROM DUAL;
--DUAL IS A DUMMUY TABLE. USE IT WHEN YOU DON'T REQUIRE A TABLE BUT NEED TABLE LIKE SYNTAX.
END;



-- CREATE INCREMENTATION SEQUENCE
CREATE SEQUENCE SQ_USER_INC
START WITH 1
INCREMENT BY 1;

--CREATE BEFORE INSERT TRIGGER FOR PRIMARY KEYS
CREATE OR REPLACE TRIGGER TR_INSERT_USER_INCREMENT
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
SELECT SQ_USER_INC.NEXTVAL INTO :new.USER_ID FROM DUAL;

END;



-- CREATE INCREMENTATION SEQUENCE
CREATE SEQUENCE SQ_BANK_ACCOUNT_INC
START WITH 1
INCREMENT BY 1;

--CREATE BEFORE INSERT TRIGGER FOR PRIMARY KEYS
CREATE OR REPLACE TRIGGER TR_INSERT_BANK_INCREMENT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
SELECT SQ_BANK_ACCOUNT_INC.NEXTVAL INTO :new.BANK_ACCOUNT_ID FROM DUAL;

END;


-- CREATE INCREMENTATION SEQUENCE
CREATE SEQUENCE SQ_BANK_NUMBER_INC
START WITH 1000
INCREMENT BY 10;

--CREATE BEFORE INSERT TRIGGER FOR PRIMARY KEYS
CREATE OR REPLACE TRIGGER TR_INSERT_NUMBER_INCREMENT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
SELECT SQ_BANK_NUMBER_INC.NEXTVAL INTO :new.BANK_ACCOUNT_NUMBER FROM DUAL;

END;




SELECT * FROM USERS WHERE USER_NAME='someuser' AND USER_PASSWORD='somepassword';


Create or replace PROCEDURE GETEMPLOYEENAMES(S OUT SYS_REFCURSOR)

AS
BEGIN
OPEN S FOR
SELECT EMPLOYEE.FIRSTNAME,EMPLOYEE.LASTNAME FROM CHINOOK.EMPLOYEE;
END;


create or replace PROCEDURE DEPOSIT(ACNumber IN INTEGER,AMOUNT IN NUMBER)
AS
BEGIN
UPDATE BANK_ACCOUNT SET BANK_ACCOUNT_AMOUNT=BANK_ACCOUNT_AMOUNT+AMOUNT WHERE BANK_ACCOUNT_Number=ACNumber;
END;

create or replace PROCEDURE WITHDRAW(ACNumber IN INTEGER,AMOUNT IN NUMBER)
AS
BEGIN
UPDATE BANK_ACCOUNT SET BANK_ACCOUNT_AMOUNT=BANK_ACCOUNT_AMOUNT-AMOUNT WHERE BANK_ACCOUNT_ID=ACNumber;
END;

CREATE OR REPLACE PROCEDURE GET_ALL_ACCOUNTS(USERID IN INTEGER,S OUT SYS_REFCURSOR)
AS
BEGIN
OPEN S FOR
SELECT * FROM BANK_ACCOUNT WHERE USER_ID=USERID;
END;


DECLARE

S SYS_REFCURSOR;

BEGIN
GET_ALL_ACCOUNTS(1,S);
END;