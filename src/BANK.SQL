/*
Bank Assignment

Console application: 

 A registered user can login with their username and password 
 An unregistered user can register by creating a username and password 
A superuser can view, create, update, and delete all users.

 A user can view their own existing accounts and balances. 
 A user can create an account.
 A user can delete an account if it is empty.  
 A user can add to or withdraw from an account. 
A user can execute multiple deposits or withrawals in a session. 
A user can logout. 

 Use sequences to generate USER_ID and BANK_ACCOUNT_ID. 
 Use at least one stored procedure with IN and OUT parameters. 
 Throw custom exceptions in the event of user error (overdraft, incorrect password, etc). 
Provide validation messages through the console for all user actions. 
Use the DAO design pattern. 
Store superuser username/password and database connection information in a properties file. 

Required technologies: 
PL/SQL with at least one stored procedure, JDBC with prepared and callable statements,
Scanner for user input, JUnit tests on as much of the program as possible.  

Bonus: 
A user's transactions are recorded.
A user may view transaction history. 

Presenatations Tuesday Apr. 11, Java code and database creation file due 5pm Monday, Apr. 10. 
*/


--CREATE TABLE STRUCTURE
CREATE TABLE BANK_ACCOUNT
(
    BANK_ACCOUNT_ID     NUMBER          NOT NULL,
    USER_ID             NUMBER          NOT NULL,
    BANK_ACCOUNT_NAME   VARCHAR2(100)   NOT NULL,
    BALANCE             NUMBER          NOT NULL,
    CONSTRAINT          PK_BANK_ACCOUNT PRIMARY KEY  (BANK_ACCOUNT_ID)
);

CREATE TABLE USER_ACCOUNT
(
    USER_ID             NUMBER          NOT NULL,
    USER_NAME           VARCHAR2(100)   NOT NULL,
    USER_PASSWORD       VARCHAR2(100)   NOT NULL, 
    CONSTRAINT          PK_USER_ACCOUNT PRIMARY KEY (USER_ID)
);
CREATE TABLE TRANSACTION_HISTORY
(
    TRANS_ID            NUMBER          NOT NULL,
    USER_ID             NUMBER          NOT NULL,
    ACTION_DESC         VARCHAR2(100),   
    CONSTRAINT          PK_TRANS_HIST   PRIMARY KEY (TRANS_ID)
);

ALTER TABLE USER_ACCOUNT ADD UNIQUE (USER_NAME);

--ADD FK REQUIREMENT
ALTER TABLE BANK_ACCOUNT ADD CONSTRAINT FK_USER_ACCOUNT
  FOREIGN KEY (USER_ID) REFERENCES USER_ACCOUNT (USER_ID);
ALTER TABLE TRANSACTION_HISTORY ADD CONSTRAINT FK_USER_ID
  FOREIGN KEY (USER_ID) REFERENCES USER_ACCOUNT (USER_ID);
  
--ADD SEQUENCE AND TRIGGER TO TRACK ID'S
CREATE SEQUENCE SQ_BANK_PK
  START WITH 1
  INCREMENT BY 1;
CREATE SEQUENCE SQ_USER_PK
  START WITH 1
  INCREMENT BY 1;
CREATE SEQUENCE SQ_TRANS_PK
  START WITH 1
  INCREMENT BY 1;
  
CREATE OR REPLACE TRIGGER TR_INSERT_BANK
  BEFORE INSERT ON BANK_ACCOUNT
  FOR EACH ROW
  BEGIN
    SELECT SQ_BANK_PK.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
  END;
CREATE OR REPLACE TRIGGER TR_INSERT_USER
  BEFORE INSERT ON USER_ACCOUNT
  FOR EACH ROW
  BEGIN
    SELECT SQ_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
  END;
CREATE OR REPLACE TRIGGER TR_INSERT_TRANS
  BEFORE INSERT ON TRANSACTION_HISTORY
  FOR EACH ROW 
  BEGIN
    SELECT SQ_TRANS_PK.NEXTVAL INTO :NEW.TRANS_ID FROM DUAL;
  END;

--ADD SAMPLE DATA
INSERT INTO USER_ACCOUNT  (USER_NAME, USER_PASSWORD)          
  VALUES                  ('RICH',    'WING');
INSERT INTO USER_ACCOUNT  (USER_NAME, USER_PASSWORD)          
  VALUES                  ('CAIT',    'BUCK');
INSERT INTO USER_ACCOUNT  (USER_NAME, USER_PASSWORD)          
  VALUES                  ('DUDE',    'GUY');
INSERT INTO USER_ACCOUNT  (USER_NAME, USER_PASSWORD)          
  VALUES                  ('master',   'p4ssw0rd');
INSERT INTO BANK_ACCOUNT  (USER_ID, BANK_ACCOUNT_NAME, BALANCE)
  VALUES                  (1,       'RICH ACCT',        1000);
INSERT INTO BANK_ACCOUNT  (USER_ID, BANK_ACCOUNT_NAME, BALANCE)
  VALUES                  (1,       'RICH OTHER ACCT',  600);
INSERT INTO BANK_ACCOUNT  (USER_ID, BANK_ACCOUNT_NAME, BALANCE)
  VALUES                  (2,       'CAIT ACCT',        3000);
INSERT INTO BANK_ACCOUNT  (USER_ID, BANK_ACCOUNT_NAME, BALANCE)
  VALUES                  (3,       'SOME DUDE ACCT',   20);
  


--CRERATE STORED PROCEDURES FOR MODIFYING ACCOUNTS
CREATE OR REPLACE PROCEDURE SP_ADD_FUNDS (BID IN NUMBER, MONEY_IN IN NUMBER, TEXT_OUT OUT VARCHAR) IS
  U_ID NUMBER;
BEGIN
  SELECT USER_ID INTO U_ID FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
  SAVEPOINT SP;
  UPDATE BANK_ACCOUNT 
    SET BALANCE=BALANCE+MONEY_IN 
    WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
  INSERT INTO TRANSACTION_HISTORY  (USER_ID, ACTION) VALUES (U_ID, 'Added '||MONEY_IN||'.');
  COMMIT;
  TEXT_OUT:='Money added successfully';
  EXCEPTION WHEN OTHERS THEN 
    TEXT_OUT:='Error!';
    ROLLBACK TO SP;
END;

CREATE OR REPLACE PROCEDURE SP_SUB_FUNDS (BID IN NUMBER, MONEY_OUT IN NUMBER, TEXT_OUT OUT VARCHAR) IS
BAL NUMBER:=0;
U_ID NUMBER;
BEGIN
  SELECT USER_ID INTO U_ID FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
  SAVEPOINT SP;
  SELECT BALANCE INTO BAL FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
  IF BAL >= MONEY_OUT THEN
    UPDATE BANK_ACCOUNT 
      SET BALANCE=BALANCE-MONEY_OUT 
      WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
    
    TEXT_OUT:='Money removed successfully';
    INSERT INTO TRANSACTION_HISTORY  (USER_ID, ACTION) VALUES (U_ID, 'Removed '||money_out||'.');
    COMMIT;
  ELSE 
    TEXT_OUT:='Insufficient funds!';
    ROLLBACK TO SP;
  END IF;
  EXCEPTION WHEN OTHERS THEN 
    TEXT_OUT:='Error!';
    ROLLBACK TO SP;
END;

CREATE OR REPLACE PROCEDURE SP_DEL_ACCT (BID IN NUMBER, TEXT_OUT OUT VARCHAR) IS
BAL NUMBER:=-1;
U_ID NUMBER;
BEGIN
  SAVEPOINT SP;
  SELECT USER_ID INTO U_ID FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
  SELECT BALANCE INTO BAL FROM BANK_ACCOUNT WHERE BANK_ACCOUNT.BANK_ACCOUNT_ID=BID;
  IF BAL = 0 THEN
    DELETE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID=BID;
    INSERT INTO TRANSACTION_HISTORY  (USER_ID, ACTION) VALUES (U_ID, 'Deleted bank account '||bid||'.');
    COMMIT;
    TEXT_OUT:='Account successfully deleted';
  ELSE
    TEXT_OUT:='ALL FUNDS MUST BE REMOVED BEFORE DELETION!';
    ROLLBACK TO SP;
  END IF;
  EXCEPTION WHEN OTHERS THEN 
    TEXT_OUT:='Error!';
    ROLLBACK TO SP;
END;

--HELPER FUNCTION FOR CREATE ACCT PROCEDURE
CREATE OR REPLACE FUNCTION FN_GET_UID(U_NAME IN VARCHAR) 
RETURN NUMBER IS 
  U_ID NUMBER;
BEGIN
  SELECT USER_ID INTO U_ID FROM USER_ACCOUNT WHERE USER_NAME=U_NAME;
  RETURN U_ID;
END;

CREATE OR REPLACE PROCEDURE SP_CREATE_ACCT (U_NAME IN VARCHAR, U_ACCT_NAME IN VARCHAR, U_BALANCE IN NUMBER, TEXT_OUT OUT VARCHAR)
IS
  U_ID NUMBER:=FN_GET_UID(U_NAME);
BEGIN
  SAVEPOINT SP;
  INSERT INTO BANK_ACCOUNT (USER_ID, BANK_ACCOUNT_NAME, BALANCE)
    VALUES (U_ID, U_ACCT_NAME, U_BALANCE);
  INSERT INTO TRANSACTION_HISTORY  (USER_ID, ACTION) VALUES (U_ID, 'Created bank account.');
  COMMIT;
  TEXT_OUT:='Account Created!';
  EXCEPTION WHEN OTHERS THEN 
    TEXT_OUT:='Error!';
    ROLLBACK TO SP;
END;

CREATE OR REPLACE PROCEDURE SP_CREATE_USER (U_NAME IN VARCHAR, U_PASS IN VARCHAR, IS_VALID OUT NUMBER)
IS
U_ID NUMBER;
BEGIN
  SAVEPOINT SP;
  INSERT INTO USER_ACCOUNT (USER_NAME, USER_PASSWORD)
    VALUES (U_NAME, U_PASS);
  SELECT USER_ID INTO U_ID FROM USER_ACCOUNT WHERE USER_ACCOUNT.USER_NAME=U_NAME;
  INSERT INTO TRANSACTION_HISTORY  (USER_ID, ACTION) VALUES (U_ID, 'Created user account.');
  COMMIT;
  IS_VALID:=1;
  EXCEPTION WHEN OTHERS THEN 
    dbms_output.put_line('Error!');
    IS_VALID:=0;
    ROLLBACK TO SP;
END;

--THIS IS A HELPER FUNCTION FOR THE SHOW ACCOUNTS PROCEDURE
CREATE OR REPLACE FUNCTION FN_SHOW_ACCOUNTS(U_NAME VARCHAR) RETURN SYS_REFCURSOR AS S SYS_REFCURSOR;
BEGIN
  OPEN S FOR 
  SELECT BANK_ACCOUNT_NAME, BALANCE FROM BANK_ACCOUNT WHERE USER_ID=FN_GET_UID(U_NAME);
  RETURN S;
END;
  
 
  
CREATE OR REPLACE PROCEDURE SP_SHOW_ACCOUNTS(U_NAME VARCHAR) IS
  S         SYS_REFCURSOR;
  SOME_NAME BANK_ACCOUNT.BANK_ACCOUNT_NAME%TYPE;
  SOME_BAL  BANK_ACCOUNT.BALANCE%TYPE;
BEGIN
  S:=FN_SHOW_ACCOUNTS(U_NAME);
  DBMS_OUTPUT.PUT_LINE('LIST OF ALL ACCOUNTS FOR USER '||U_NAME);
  LOOP
    FETCH S INTO SOME_NAME, SOME_BAL;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(RPAD(SOME_NAME,30,'.') || SOME_BAL);
  END LOOP;
  CLOSE S;
END;

--HELPER FUNCTION FOR USER VALIDATION SP
CREATE OR REPLACE FUNCTION FN_VALIDATE_USER(U_NAME VARCHAR, U_PASS VARCHAR)
RETURN NUMBER AS 
  IS_VALID NUMBER;
  NUM_ENTRY NUMBER;
BEGIN
  SELECT COUNT(USER_ID) INTO NUM_ENTRY FROM USER_ACCOUNT
    WHERE USER_NAME=U_NAME AND USER_PASSWORD=U_PASS;
  IF NUM_ENTRY=1 THEN
    RETURN 1;
  ELSE 
    RETURN 0;
  END IF;
END;

CREATE OR REPLACE PROCEDURE SP_VALIDATE_USER(U_NAME VARCHAR, U_PASS VARCHAR, IS_VALID OUT NUMBER) IS 
BEGIN
  IS_VALID:=FN_VALIDATE_USER(U_NAME, U_PASS);
  IF IS_VALID=1 THEN
    DBMS_OUTPUT.PUT_LINE('Username/Password combination is correct, logging in...');
  ELSE 
    DBMS_OUTPUT.PUT_LINE('Username/Password combination is incorrect, please try again.');
  END IF;
END;



