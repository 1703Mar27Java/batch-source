CREATE TABLE BANK_ACCOUNT(
  BANK_ACCOUNT_ID INTEGER PRIMARY KEY,
  USER_ID INTEGER,
  BANK_ACCOUNT_NAME VARCHAR2(25),
  BALANCE INTEGER
)

ALTER TABLE BANK_ACCOUNT 
ADD CONSTRAINT USER_ID_FK
FOREIGN KEY (USER_ID) REFERENCES BANK_USER(BANK_USER_ID);

ALTER TABLE BANK_ACCOUNT DROP CONSTRAINT OVERDRAFT_CHECK;

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT OVERDRAFT_CHECK 
CHECK (BALANCE > -1); 

CREATE TABLE BANK_USER(
  BANK_USER_ID INTEGER PRIMARY KEY,
  BANK_USERNAME VARCHAR2(25),
  BANK_PASSWORD VARCHAR(25)
)

ALTER TABLE BANK_USER 
ADD USER_SUPER_STATUS VARCHAR2(1);

CREATE SEQUENCE SQ_USER_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON BANK_USER
FOR EACH ROW 
BEGIN
  SELECT SQ_USER_PK.NEXTVAL INTO :NEW.BANK_USER_ID FROM DUAL;
END;

CREATE SEQUENCE SQ_BANK_ACCOUNT_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW 
BEGIN
  SELECT SQ_BANK_ACCOUNT_PK.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
END;

SELECT * FROM BANK_USER;

SAVEPOINT DELETE_ALL_TEST;

ROLLBACK  TO SAVEPOINT DELETE_ALL_TEST;


CREATE OR REPLACE PROCEDURE GETUSER (USERID IN NUMBER, USERNAME OUT VARCHAR2) 
AS 
BEGIN SELECT BANK_USERNAME INTO USERNAME FROM BANK_USER WHERE BANK_USER_ID = USERID; 
END;

DROP TABLE EMPLOYEE;
