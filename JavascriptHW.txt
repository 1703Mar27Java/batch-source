var homework = {};
module.exports = homework;

/*
 1. Return the nth fibonacci number

 f(0) = 0
 f(1) = 1
 f(10) = 55
*/
homework.fibonacci = function(n){
	if (n == 0) {
		return 0;
	}
	if (n == 1 || n == 2) {
		return 1;
	}
	return homework.fibonacci(n-1) + homework.fibonacci(n-2);
};

/*
 2. Sort array of integers

 f([2,4,5,1,3,1]) = [1,1,2,3,4,5]

 Don't use the Array sort() method... that would be lame.
*/
var f = [2,4,5,1,3,1];
homework.sort = function(array) {
	var swapped = true;
	while (swapped) {
		swapped = false;
		for (var i = 0; i < array.length-1; i++) {
			if (array[i+1] < array[i]) {
				var temp = array[i];
				array[i] = array[i+1];
				array[i+1] = temp;
				swapped = true;
			}
		}
	}
};

/*
 3. Return the factorial of n

 f(0) = 1
 f(1) = 1
 f(3) = 6
*/
homework.factorial = function(n){
	if (n == 1 || n == 0) {
		return 1;
	}
	else {
		return n * homework.factorial(n-1);
	}
};

/*
 4. Rotate left

 Given array, rotate left n times and return array

 f([1,2,3,4,5], 1) = [2,3,4,5,1]
 f([1,2,3,4,5], 6) = [2,3,4,5,1]
 f([1,2,3,4,5], 3) = [4,5,1,2,3]

*/
homework.rotateLeft = function(array, n) {
	for (var i = 0; i < n; i++) {
		var temp = array[0];
		for (var j = 0; j < array.length-1; j++) {
			array[j] = array[j+1];
		}
		array[j] = temp;
	}
	return array;
};

/*
 5. Balanced Brackets

 A bracket is any one of the following: (, ), {, }, [, or ]

 The following are balanced brackets:
    ()
    ()()
    (())
    ({[]})

 The following are NOT balanced brackets:
 (
 )
 (()
 ([)]

 Return true if balanced
 Return false if not balanced
*/
homework.balancedBrackets = function(bracketsString){
	var stack = [];
	for (var i = 0; i < bracketsString.length; i++) {
		var s = bracketsString.charAt(i);
		if (s == "(" || s == "[" || s == "{") {
			stack.push(s);
		} else if(s == ")" && stack.pop() != "(") {
			return false;
		} else if(s == "]" && stack.pop() != "[") {
			return false;
		} else if(s == "}" && stack.pop() != "{") {
			return false;
		}
	}
	if (stack.pop()) {
		return false;
	} else {
		return true;
	}
};