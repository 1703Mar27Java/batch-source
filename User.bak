/*WEEK 2 SQL LAB
AMELIA HACKWORTH*/

/*2.1 SELECT*/
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;


/*2.2 ORDER BY*/
SELECT * FROM ALBUM ORDER BY TITLE DESC, TITLE;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;


/*2.3 INSERT INTO*/
SELECT * FROM GENRE;
INSERT INTO GENRE(GENREID, NAME) VALUES(26, 'Country');
INSERT INTO GENRE(GENREID, NAME) VALUES(27,'Gospel');
SELECT * FROM GENRE;


SELECT * FROM EMPLOYEE;
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,
FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,
ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,
EMAIL)VALUES(9,'Parker','Elisabeth','Office Manager', 1, 
'07-AUG-82','12-MAR-05','2345 S. Rolando Blvd','Santa Cruz',
'CA','United States','90235', '(951)543-2345','(951)543-7980',
'elisabeth@chinookcorp.com');
SELECT * FROM EMPLOYEE;
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,
FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,
ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,
EMAIL)VALUES(10,'Johnson','Mark','Remote Branch Manager', 1, 
'22-NOV-69','3-SEP-03','564 W. Orange Ave.','Santa Cruz',
'CA','United States','90235', '(951)564-6789','(951)458-4233',
'mark@chinookcorp.com');
SELECT * FROM EMPLOYEE;

SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME,COMPANY,
ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,
SUPPORTREPID)VALUES(60,'Monique', 'Thompson',NULL,'345 S. 26th St',
'Mt. Vernon','IL','United States', '66666','(618)567-9894', NULL, 
'lady88sassy@gmail.com',3);
SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME,COMPANY,
ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,
SUPPORTREPID)VALUES(63,'Howard', 'Phillips',NULL,'436 Rear Creek Ln',
'Lexington','KY','United States', '87643','(704)326-8706', NULL, 
'phillipsh@yahoo.com',3);
SELECT * FROM CUSTOMER;
SELECT LASTNAME,CUSTOMERID FROM CUSTOMER WHERE LASTNAME='Phillips';
DELETE FROM CUSTOMER WHERE CUSTOMERID = 62;
DELETE FROM CUSTOMER WHERE CUSTOMERID = 63;
SELECT * FROM CUSTOMER;



/*2.4 UPDATE */
UPDATE CUSTOMER SET FIRSTNAME='Robert', LASTNAME='Walter' 
WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';
SELECT * FROM CUSTOMER;

SELECT * FROM ARTIST;
SELECT NAME FROM ARTIST WHERE NAME = 'Creedence Clearwater Revival';
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';
SELECT NAME FROM ARTIST WHERE NAME = 'CCR';

/*2.5 LIKE*/
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/*2.6 BETWEEN*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

/*2.7 DELETE*/
SELECT * FROM CUSTOMER;
SELECT FIRSTNAME, LASTNAME FROM CUSTOMER 
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';

select * from ALL_CONSTRAINTS 
where constraint_name = 'CHINOOK.FK_INVOICECUSTOMERID';

SELECT * FROM INVOICE;
SELECT * FROM INVOICE ORDER BY CUSTOMERID;
DELETE FROM INVOICE WHERE CUSTOMERID = 32;
DELETE FROM CUSTOMER WHERE CUSTOMERID =32;

/*FOUND WHAT THE CONTRAINT WAS BY LOOKING AT THE ERROR MESSAGE
AND BY LOOKING AT THE TABLE DROP MENU AND CLICKED ON THE SQL TAB.  */
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE CUSTOMERID = 32;
SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;

--6.0 TRIGGERS
--6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
  INSERT INTO EMPLOYEE VALUES (:new.EMPLOYEEID,:new.LASTNAME,
:new.FIRSTNAME,:new.TITLE,:new.REPORTSTO,:new.BIRTHDATE,:new.HIREDATE,
:new.ADDRESS,:new.CITY,:new.STATE,:new.COUNTRY,:new.POSTALCODE,:new.PHONE,
:new.FAX,:new.EMAIL);
DBMS_OUTPUT.PUT_LINE('Record successfully 
inserted into EMPLOYEE table');
END;
    --DUAL IS A DUMMY TABLE WHEN YOU DON'T REQUIRE A TABLE
    --BUT NEED A TABLE-LIKE SYNTAX.
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM_ALBUMID
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    UPDATE ALBUM SET ALBUMID = :new.ALBUMID
    WHERE ALBUMID = :old.ALBUMID;
   DBMS_OUTPUT.PUT_LINE('ALBUMID, 
   successfully updated into ALBUM 
    table');
END;


CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM_TITLE
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
  UPDATE ALBUM SET TITLE = :new.TITLE
  WHERE TITLE = :old.TITLE;
  DBMS_OUTPUT.PUT_LINE('TITLE, 
   successfully updated into ALBUM 
    table');
END;  

CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM_ARTISTID
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
  UPDATE ALBUM SET ARTISTID = :new.ARTISTID
  WHERE ARTISTID = :old.ARTISTID;
  DBMS_OUTPUT.PUT_LINE('ARTISTID, 
   successfully updated into ALBUM 
    table');
END;  

  
--DROP TRIGGER TR_UPDATE_ALBUM;

SELECT * FROM ALBUM;

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER_CUSTOMERID
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DELETE FROM CUSTOMER
    WHERE CUSTOMER.CUSTOMERID = :old.CUSTOMERID;
END;


--7.0 JOINS!
--7.1 INNER JOIN
SELECT CUSTOMER.LASTNAME, CUSTOMER.FIRSTNAME,
INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN
INVOICE
ON
CUSTOMER.CUSTOMERID = INVOICE.INVOICEID;

--7.2 OUTER JOIN
SELECT CUSTOMER.CUSTOMERID,CUSTOMER.LASTNAME, CUSTOMER.FIRSTNAME, 
INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN 
INVOICE 
ON
CUSTOMER.CUSTOMERID  = INVOICE.CUSTOMERID;

--7.3 RIGHT JOIN
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT OUTER JOIN
ARTIST
ON
ARTIST.NAME = ALBUM.TITLE;

--7.4 CROSS JOIN
SELECT * FROM ARTIST
CROSS JOIN ALBUM
ORDER BY ARTIST.NAME;


--7.5 SELF-JOIN
SELECT A.EMPLOYEEID, A.FIRSTNAME, A.LASTNAME, B.REPORTSTO AS "SUPERVISOR"
FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON A.REPORTSTO = B.EMPLOYEEID;


--3.0 SQL FUNCTIONS

--3.1 SYSTEM DEFINED FUNCTIONS
--A time function that retuns the current time
SELECT SYSTIMESTAMP FROM DUAL;

--A fucntion that returns the length of the Mediatype table:
SELECT LENGTH(NAME)
FROM MEDIATYPE
WHERE MEDIATYPEID = 2;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
--Create a function that returns the average
--total of all invoices
SELECT AVG(TOTAL) FROM INVOICE;

--Create a function that 
--returns the most expensive track
SELECT MAX(UNITPRICE) FROM TRACK;

--3.3 USER DEFINED SCALAR FUNCTIONS
/*Create a function that returns the average 
price of invoiceline items in the 
invoiceline table*/
--SELECT AVG(UNITPRICE) FROM INVOICELINE;

CREATE OR REPLACE FUNCTION CHECK_AVG_P(INVOICELINE.UNITPRICE IN INVOICELINE.INVOICELINEID%TYPE)
RETURN NUMBER
IS
  A_IVLID  INVOICELINE.INVOICELINEID;
  A_AVG_P  INVOICELINE.UNITPRICE; 
BEGIN
  SELECT AVG(UNITPRICE) 
  INTO A_AVG_P
  FROM EMPLOYEES
  WHERE INVOICELINEID = A_IVLID;
END;
  
--3.4 USER DEFINED TABLE VALUED FUNCTIONS
/*Create a function that returns all 
employees who are born after 1968.*/
CREATE OR REPLACE FUNCTION FIND_MAX_NUMBER (X IN NUMBER, Y IN NUMBER)
RETURN NUMBER
IS
Z NUMBER;
BEGIN
  IF X>Y THEN
    Z:=X;
    ELSE
    Z:=Y;
    END IF;
    RETURN Z;
END;


--4.0 STORED PROCEDURES
--4.1 Basic Stored Procedure
CREATE OR REPLACE PROCEDURE ALL_EMPLOYEE_NAMES(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT EMPLOYEE.LASTNAME,EMPLOYEE.FIRSTNAME FROM EMPLOYEE;
END;


DECLARE 
  S SYS_REFCURSOR;
  FNAME EMPLOYEE.LASTNAME%TYPE;
  LNAME EMPLOYEE.FIRSTNAME%TYPE;
  /*FNAME LASTNAME.EMPLOYEE%TYPE;
  LNAME LASTNAME.EMPLOYEE%TYPE;*/
 
BEGIN
  ALL_EMPLOYEE_NAMES(S);

  LOOP
    FETCH S INTO FNAME, LNAME;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FNAME||' IS FIRST NAME, '||LNAME||' IS LAST NAME');
    END LOOP;
    CLOSE S;
END;

--INVOKE PROCEDURE
BEGIN
  ALL_EMPLOYEE_NAMES(S);
END;


--5.0 TRANSACTIONS
--5.1 Create a transaction that given a invoiceId will delete 
--that invoice (There may be constraints that rely on this, 
--find out how to resolve them).
--(VARIABLE NAME IN/OUT DATATYPE)


ALTER TABLE INVOICE ADD CONSTRAINT FK_INVOICECUSTOMERID 
FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID);



CREATE OR REPLACE PROCEDURE INVOICE_DELETE(ID_DEL IN INTEGER)
IS
BEGIN
DELETE FROM INVOICE
WHERE INVOICEID=ID_DEL;
END;

BEGIN
  SAVEPOINT start_transaction;
  ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
  
  
END;


DECLARE 
  S SYS_REFCURSOR;
  FNAME EMPLOYEE.LASTNAME%TYPE;
  LNAME EMPLOYEE.FIRSTNAME%TYPE;
  /*FNAME LASTNAME.EMPLOYEE%TYPE;
  LNAME LASTNAME.EMPLOYEE%TYPE;*/
 
BEGIN
  ALL_EMPLOYEE_NAMES(S);

  LOOP
    FETCH S INTO FNAME, LNAME;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FNAME||' IS FIRST NAME, '||LNAME||' IS LAST NAME');
    END LOOP;
    CLOSE S;
END;




