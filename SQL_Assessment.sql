/* SQL Lab */

/*2.1*/
/*Task 1*/
SELECT * FROM Employee;

/*Task 2*/
SELECT * FROM Employee
WHERE LASTNAME = 'King';

/*Task 3*/
SELECT * FROM Employee
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO = NULL;

/*2.2*/
/*Task 1*/
SELECT * FROM Album
ORDER BY TITLE DESC;

/*Task 2*/
SELECT FIRSTNAME, CITY FROM Customer
ORDER BY CITY ASC;

/*2.3*/
/*Task 1*/
INSERT INTO GENRE VALUES(1001, 'Rockabilly');

/*Task 2*/
INSERT INTO EMPLOYEE 
VALUES(117, ' ', 'JOHN',
'MASTERCHEIF', NULL, NULL,NULL, 
NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);   

/*Task 3*/
INSERT INTO CUSTOMER
VALUES(1001, 'CIRE', 'LHEIB', 'ERUTAVER', 
'EVIRD ACIREMA AZALP', 'NOTSER', 'AV','SU', 
'07102', NULL, NULL, 'MOC.LIAMG@1821ELHEIB', 1); 

/*2.4*/
/*Task 1*/
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE 
FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

/*Task 2*/
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

/*2.5*/
/*Task 1*/
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/*2.6*/
/*Task 1*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

/*Task 2*/
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

/*2.7*/
/*Task 1*/
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'ROBERT' AND LASTNAME = 'WALTER';
------------------------------------------------------------------------
/*3.1*/
/*Task 1*/
SELECT CURRENT_TIMESTAMP FROM DUAL;

/*Task 2*/
SELECT LENGTH(NAME) FROM MEDIATYPE;

/*3.2*/
/*Task 1*/
SELECT AVG(TOTAL) FROM INVOICE;

/*Task 2*/
SELECT MAX(UNITPRICE) FROM TRACK;

/*3.3*/
/*Task 1*/
CREATE OR REPLACE FUNCTION AVG_INVOICELINE
RETURN INTEGER IS
X INTEGER;
BEGIN
SELECT AVG(UNITPRICE) INTO X FROM INVOICELINE;
END;

/*3.4*/
/*Task 1*/
CREATE OR REPLACE FUNCTION AFTER_1968
RETURN DATE IS
X DATE;
Y DATE;
BEGIN
X := '31-DEC-68';
SELECT BIRTHDATE INTO Y FROM EMPLOYEE WHERE Y > X;
END;
---------------------------------------------------------------------------
/*4.1*/
/*Task 1*/
CREATE OR REPLACE PROCEDURE NAMES
IS
FNAME VARCHAR2(200);
LNAME VARCHAR2(200);
BEGIN
SELECT FIRSTNAME, LASTNAME INTO FNAME,LNAME FROM EMPLOYEE;
END;

/*4.2*/
/*Task 1*/
CREATE OR REPLACE PROCEDURE UPDATE_NAME(NEWTITLE IN VARCHAR2, NEWID IN INTEGER)
IS
BEGIN
UPDATE EMPLOYEE SET TITLE = NEWTITLE WHERE EMPLOYEEID = NEWID;
END;

/*Task 2*/
CREATE OR REPLACE PROCEDURE GET_MANAGER(EID IN INTEGER)
IS
FNAME VARCHAR(200);
LNAME VARCHAR(200);
MTITLE VARCHAR(200);
BEGIN
IF(EID > 1) THEN
  SELECT FIRSTNAME, LASTNAME, TITLE INTO FNAME,LNAME, MTITLE FROM EMPLOYEE WHERE EMPLOYEE.EMPLOYEEID = 1;
  END IF;
END;

/*4.3*/
/*Task 1*/
CREATE OR REPLACE PROCEDURE PERSON_AT_PLACE(CID IN INTEGER, CNAME OUT VARCHAR2, CCOMPANY OUT VARCHAR2)
IS
BEGIN
SELECT COMPANY, FIRSTNAME+LASTNAME INTO CCOMPANY, CNAME FROM CUSTOMER WHERE CID = CUSTOMER.CUSTOMERID; 
END;
---------------------------------------------------------------------------
/*5.1*/
/*Task 1*/
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(IID IN INTEGER)
IS
BEGIN
DELETE FROM INVOICE WHERE IID = INVOICE.INVOICEID;
END;

CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER
IS
BEGIN
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES(6969, 'DANNY','SEXBANG', 'SEXYTIME@GMAIL.COM');
END;
--------------------------------------------------------------------------
/*6.1*/
/*Task 1*/
CREATE OR REPLACE TRIGGER TR_EMPLOYEE_INSERT
AFTER INSERT ON EMPLOYEE
DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPLOYEE ADDED: ');
END;

/*Task 2*/
CREATE OR REPLACE TRIGGER TR_ALBUM_UPDATE
AFTER UPDATE ON ALBUM
FOR EACH ROW
DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('ALBUM UPDATED: '+ :NEW.NAME);
END;

/*Task 3*/
CREATE OR REPLACE TRIGGER TR_CUSTOMER_DELETE
AFTER DELETE ON CUSTOMER
FOR EACH ROW
DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED: ' || :OLD.CUSTOMERID);
END;
---------------------------------------------------------------------------
/*7.1*/
SELECT FIRSTNAME, INVOICEID FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/*7.2*/
SELECT FIRSTNAME, LASTNAME, INVOICEID, TOTAL, CUSTOMER.CUSTOMERID
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/*7.3*/
SELECT ARTIST.NAME, TITLE
FROM ALBUM
RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

/*7.4*/
SELECT * FROM ALBUM CROSS JOIN ARTIST
WHERE ALBUM.ARTISTID = ARTIST.ARTISTID
ORDER BY ARTIST.NAME;

/*7.5*/
SELECT A.REPORTSTO, B.REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;
