----TABLES-------------------------------------------------------------------------------
CREATE TABLE USER_ROLES(
    UR_ID NUMBER,
    UR_ROLE VARCHAR2(100),
    CONSTRAINT USER_ROLES_PK PRIMARY KEY(UR_ID)
);

CREATE TABLE REIMBURSEMENT_STATUS(
    RS_ID NUMBER,
    RS_STATUS VARCHAR2(100),
    CONSTRAINT REIMBURESEMENT_STATUS_PK PRIMARY KEY(RS_ID)
);

CREATE TABLE REIMBURSEMENT_TYPE(
    RT_ID NUMBER,
    RT_TYPE VARCHAR2(100),
    CONSTRAINT REIMBURESEMENT_TYPE_PK PRIMARY KEY(RT_ID)
);

CREATE TABLE USERS(
    U_ID NUMBER,
    U_USERNAME VARCHAR2(100),
    U_PASSWORD VARCHAR2(100),
    U_FIRSTNAME VARCHAR2(100),
    U_LASTNAME VARCHAR2(100),
    U_EMAIL VARCHAR2(100),
    UR_ID NUMBER,
    CONSTRAINT USERS_PK PRIMARY KEY(U_ID),
    CONSTRAINT USERS_U_USERNAME_UN UNIQUE(U_USERNAME),
    CONSTRAINT USERS_U_EMAIL_UN UNIQUE(U_EMAIL),
    CONSTRAINT FK_USERS_USER_ROLES FOREIGN KEY (UR_ID) REFERENCES USER_ROLES(UR_ID)
)

CREATE TABLE REIMBURSEMENTS(
    R_ID NUMBER, 
    R_AMOUNT NUMBER, 
    R_DESCRIPTION VARCHAR2(100),
    R_RECEIPT BLOB,
    R_SUBMITTED TIMESTAMP,
    R_RESOLVED TIMESTAMP,
    U_ID_AUTHOR NUMBER,
    U_ID_RESOLVER NUMBER, 
    RS_ID NUMBER,
    RT_ID NUMBER,
    CONSTRAINT REIMBURSEMENTS_PK PRIMARY KEY (R_ID),
    CONSTRAINT FK_REIMBURSEMENTS_AUTHOR FOREIGN KEY(U_ID_AUTHOR) REFERENCES USERS(U_ID) ON DELETE CASCADE,
    CONSTRAINT FK_REIMBURSEMENTS_RESOLVER FOREIGN KEY(U_ID_RESOLVER) REFERENCES USERS(U_ID) ON DELETE CASCADE,
    CONSTRAINT FK_REIMBURSEMENTS_STATUS FOREIGN KEY(RS_ID) REFERENCES REIMBURSEMENT_STATUS(RS_ID),
    CONSTRAINT FK_REIMBURSEMENTS_TYPE FOREIGN KEY(RT_ID) REFERENCES REIMBURSEMENT_TYPE(RT_ID)
);


-----------SEQUENCES------------------------------------------------------------------

CREATE SEQUENCE SQ_USERS_PK
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_REIMBURSEMENTS_PK
START WITH 1
INCREMENT BY 1;


------------TRIGGERS---------------------------------------------------------------------

CREATE OR REPLACE TRIGGER TR_INSERT_USERS
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_USERS_PK.NEXTVAL INTO :NEW.U_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_REIMBURSEMENTS
BEFORE INSERT ON REIMBURSEMENTS
FOR EACH ROW
BEGIN
    SELECT SQ_REIMBURSEMENTS_PK.NEXTVAL INTO :NEW.R_ID FROM DUAL;
END;
/

------PROCEDURES------------------------------------------------------------

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE(ID IN NUMBER, PASSWORD IN VARCHAR2, FIRSTNAME IN VARCHAR2, LASTNAME IN VARCHAR2, EMAIL IN VARCHAR2)
IS 
BEGIN

UPDATE USERS
SET  U_FIRSTNAME = FIRSTNAME, U_PASSWORD = PASSWORD, U_LASTNAME = LASTNAME, U_EMAIL = EMAIL
WHERE U_ID = ID;

END;


CREATE OR REPLACE PROCEDURE SP_SUBMIT_REQUEST(AUTHOR IN NUMBER, AMOUNT IN NUMBER, DESCRIPTION IN VARCHAR2, RECEIPT IN BLOB, TYPE IN NUMBER)
IS 
BEGIN

INSERT INTO REIMBURSEMENTS (U_ID_AUTHOR, R_AMOUNT, R_DESCRIPTION, R_RECEIPT, RT_ID, R_SUBMITTED, RS_ID)
VALUES (AUTHOR, AMOUNT, DESCRIPTION, RECEIPT, TYPE, SYSDATE, 0);

END;


CREATE OR REPLACE PROCEDURE SP_RESOLVE_REQUEST(ID IN NUMBER, RESOLVER IN NUMBER, STATUS IN NUMBER)
IS 
BEGIN

UPDATE REIMBURSEMENTS
SET U_ID_RESOLVER = RESOLVER, R_RESOLVED = SYSDATE, RS_ID = STATUS
WHERE R_ID = ID;

END;

CREATE OR REPLACE PROCEDURE SP_CREATE_USER(USERNAME IN VARCHAR2, PASSWORD IN VARCHAR2, FIRSTNAME IN VARCHAR2, LASTNAME IN VARCHAR2, EMAIL IN VARCHAR2, ROLE IN NUMBER)
IS BEGIN

INSERT INTO USERS (U_USERNAME, U_PASSWORD, U_FIRSTNAME, U_LASTNAME, U_EMAIL, UR_ID) 
VALUES (USERNAME, PASSWORD, FIRSTNAME, LASTNAME, EMAIL, ROLE);

END;


------Assignments-------------------------------

/*0 INDEXED FOR EASY TRANSLATION IN JAVA CODE*/

INSERT INTO USER_ROLES (UR_ID, UR_ROLE) VALUES (0, 'ASSOCIATE');
INSERT INTO USER_ROLES (UR_ID, UR_ROLE) VALUES (1, 'MANAGER');
INSERT INTO USER_ROLES (UR_ID, UR_ROLE) VALUES (2, 'ADMIN');

INSERT INTO REIMBURSEMENT_STATUS (RS_ID, RS_STATUS) VALUES (0, 'PENDING');
INSERT INTO REIMBURSEMENT_STATUS (RS_ID, RS_STATUS) VALUES (1, 'APPROVED');
INSERT INTO REIMBURSEMENT_STATUS (RS_ID, RS_STATUS) VALUES (2, 'DECLINED');

INSERT INTO REIMBURSEMENT_TYPE (RT_ID, RT_TYPE) VALUES (0, 'TRAVEL');
INSERT INTO REIMBURSEMENT_TYPE (RT_ID, RT_TYPE) VALUES (1, 'CERTIFICATION');
INSERT INTO REIMBURSEMENT_TYPE (RT_ID, RT_TYPE) VALUES (2, 'MATERIAL');
INSERT INTO REIMBURSEMENT_TYPE (RT_ID, RT_TYPE) VALUES (3, 'HEALTH');
INSERT INTO REIMBURSEMENT_TYPE (RT_ID, RT_TYPE) VALUES (4, 'OTHER');



SELECT
R_ID ID,
R_AMOUNT AMOUNT,
R_DESCRIPTION DESCRIPTION,
R_RECEIPT RECEIPT,
R_SUBMITTED SUBMITTED,
R_RESOLVED RESOLVED,
T.U_USERNAME AUTHOR,
USERS.U_USERNAME RESOLVER, 
RS_STATUS STATUS,
RT_TYPE TYPE 
FROM (
SELECT * FROM REIMBURSEMENTS
INNER JOIN REIMBURSEMENT_STATUS ON REIMBURSEMENTS.RS_ID = REIMBURSEMENT_STATUS.RS_ID
INNER JOIN REIMBURSEMENT_TYPE ON REIMBURSEMENTS.RT_ID = REIMBURSEMENT_TYPE.RT_ID 
INNER JOIN USERS ON U_ID_AUTHOR = USERS.U_ID) T LEFT JOIN USERS ON T.U_ID_RESOLVER = USERS.U_ID WHERE T.U_ID=23;
