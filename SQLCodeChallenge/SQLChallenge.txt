CREATE USER challenge
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;
GRANT connect to challenge;
GRANT resource to challenge;
GRANT create session TO challenge;
GRANT create table TO challenge;
GRANT create view TO challenge;
conn challenge/p4ssw0rd

CREATE TABLE EMPLOYEE
( 
  --Columns: EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL
  EMPLOYEE_ID NUMBER NOT NULL PRIMARY KEY,
  EMP_FIRSTNAME VARCHAR,
  EMP_LASTNAME VARCHAR,
  DEPARTMENT_ID NUMBER, --FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENT_ID),
  SALARY NUMBER,
  EMP_EMAIL VARCHAR
  
  CONSTRAINT fk_supplier
    FOREIGN KEY (DEPARTMENT_ID)
    REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

CREATE TABLE DEPARTMENT
( 
  -- DEPARTMENT_ID, DEPARTMENT_NAME
  DEPARTMENT_ID NUMBER NOT NULL PRIMARY KEY,
  DEPARTMENT_NAME VARCHAR
);

--Create a sequence and trigger to autogenerate primary key values for both tables. 
CREATE SEQUENCE EMPLOYEE_ID START WITH 1 INCREMENT BY 1 NOCYCLE;

CREATE OR REPLACE TRIGGER BI_EMPLOYEEID
BEFORE INSERT ON EMPLOYEE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
 WHEN (NEW.ID IS NULL)
BEGIN
  select EMPLOYEE_ID.NEXTVAL
   INTO :NEW.ID from dual;
END;

CREATE SEQUENCE DEPARTMENT_ID START WITH 1 INCREMENT BY 1 NOCYCLE;

CREATE OR REPLACE TRIGGER BI_DEPEARMENTID
BEFORE INSERT ON DEPARTMENT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
 WHEN (NEW.ID IS NULL)
BEGIN
  select DEPARTMENT_ID.NEXTVAL
   INTO :NEW.ID from dual;
END;

--Insert at least six employees and three departments. 
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('HR');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('PAYROLL');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('CUSTOMER SERVICE');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES ('RON', 'GORSUCH', 1, 500, 'rgors@email.org');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID) VALUES ('JOE', 'FINK', 3);
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID) VALUES ('SOFIA', 'COVER', 1);
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY) VALUES ('FIONNA', 'VIKKI', 3, 600);
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, EMP_EMAIL) VALUES ('FRED', 'MILLER', 2, 500, 'fmiller@email.org');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID) VALUES ('PHEOBE', 'SMITH', 2);

/*Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each 
employee's salary within the department by 10%, and returns the new average salary for the 
department, as well as a boolean value indicating whether the ID entered corresponds to a valid
department*/
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE(DEPT_ID IN NUMBER, S OUT SYS_REFCURSOR)
IS
  SAL employee.SALARY%TYPE;
BEGIN
  OPEN S FOR
    SELECT SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID IN (SELCT DEPARTMENT_ID FROM DEPARTMENT);  --A DML COMMAND
    LOOP
      FETCH S INTO SAL;
      UPDATE EMPLOYEE
        SET SAL = SAL * 0.15,
      EXIT WHEN S%NOTFOUND;
    END LOOP;
    
END;

DECLARE
  S SYS_REFCURSOR;
  SAL employee.SALARY%TYPE;
BEGIN
  FIRSTANDLASTNAME(S);
  
  --THIS IS A LOOP THAT MOVES THROUGH LIST
  LOOP
    FETCH S INTO SAL;
    DBMS_OUTPUT.PUT_LINE('Salary ' || S);
    EXIT WHEN S%NOTFOUND;
  END LOOP;
  CLOSE S;
END;
