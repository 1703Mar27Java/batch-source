--Select Section
SELECT * FROM EMPLOYEE;

SELECT * 
FROM EMPLOYEE
WHERE LastName = 'King';

SELECT *
FROM EMPLOYEE
WHERE FirstName = 'Andrew' AND REPORTSTO IS NULL;

--OrderBy SECTION
SELECT * 
FROM ALBUM
ORDER BY TITLE DESC;

SELECT FirstName, CITY
FROM CUSTOMER
ORDER BY CITY;

--INSERT INTO SECTION
INSERT INTO Genre(GenreID, Name) 
VALUES (1748, 'HIPHOP');
INSERT INTO Genre(GenreID, Name) 
VALUES (100, 'SALSA');

--UPDATE SECTION
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert',
    LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron'
AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--LIKE SECTION
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--BETWEEN SECTION
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM EMPLOYEE 
WHERE HIREDATE BETWEEN TO_DATE ('2003/06/01', 'yyyy/mm/dd')
AND TO_DATE ('2004/03/01', 'yyyy/mm/dd');

--DELETE SECTION
DELETE FROM CUSTOMER
WHERE EXISTS(SELECT FIRSTNAME,LASTNAME
FROM CUSTOMER
WHERE FIRSTNAME = 'ROBERT'
AND LASTNAME = 'WALTER');

--FUNCTION SECTION
SELECT SESSIONTIMEZONE, CURRENT_TIMESTAMP FROM DUAL;



--JOIN SECTION
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.INVOICEID;

SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, CUSTOMER.CUSTOMERID, INVOICE.TOTAL
FROM CUSTOMER
LEFT OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT OUTER JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

SELECT ARTIST.NAME
FROM ALBUM
CROSS JOIN ARTIST 
ORDER BY ARTIST.NAME ASC;

SELECT A.REPORTSTO AS "BOSS", B.REPORTSTO AS "JEFE"
FROM RESPORTSO A, REPORTSTO B
WHERE A.RESPORTS0 = B.REPORTSTO

--TRIGGER SECTION
CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE
AFTER INSERT
ON EMPLOYEE
FOR EACH ROW
BEGIN
INSERT INTO EMPLOYEE
(EmployeeId,
    LastName,
    FirstName,
    Title,
    ReportsTo,
    BirthDate ,
    HireDate,
    Address,
    City,
    State,
    Country,
    PostalCode,
    Phone,
    Fax,
    Email)
  VALUES 
  (:NEW.EmployeeId,
   :NEW.LastName,
    :NEW.FirstName,
    :NEW.Title,
    :NEW.ReportsTo,
    :NEW.BirthDate ,
    :NEW.HireDate,
    :NEW.Address,
    :NEW.City,
    :NEW.State,
    :NEW.Country,
    :NEW.PostalCode,
    :NEW.Phone,
    :NEW.Fax,
    :NEW.Email);
END;

CREATE OR REPLACE TRIGGER INSERT_ALBUM
AFTER UPDATE
ON ALBUM
FOR EACH ROW
BEGIN
INSERT INTO ALBUM(
ALBUMID,
TITLE,
ARTISTID)
VALUES(
:NEW.ALBUMID,
:NEW.TITLE,
:NEW.ARTISTID);
END;

CREATE OR REPLACE TRIGGER DELETE_CUSTOMER
AFTER DELETE
ON CUSTOMER
FOR EACH ROW
BEGIN
INSERT INTO CUSTOMER(
CustomerId,
    FirstName,
    LastName,
    Company,
    Address,
    City,
    State,
    Country,
    PostalCode,
    Phone,
    Fax,
    Email,
    SupportRepId)
VALUES(
:OLD.CustomerId,
    :OLD.FirstName,
    :OLD.LastName,
    :OLD.Company,
    :OLD.Address,
    :OLD.City,
    :OLD.State,
    :OLD.Country,
    :OLD.PostalCode,
    :OLD.Phone,
    :OLD.Fax,
    :OLD.Email,
    :OLD.SupportRepId);
    END;
