--2.0 SQL QUERIES
SELECT * FROM Employee;

SELECT * FROM Employee
WHERE LASTNAME = 'King';

SELECT * FROM Employee
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO is NULL;

SELECT * FROM Album
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM Customer
ORDER BY CITY ASC;

INSERT INTO Genre
VALUES(26,'electroswing');

INSERT INTO Genre
VALUES(27,'Jpop');

SELECT * FROM Employee;

INSERT INTO EMPLOYEE (FIRSTNAME,LASTNAME,EMPLOYEEID)
VALUES('Luis','Nieves',9);

INSERT INTO EMPLOYEE (FIRSTNAME,LASTNAME,EMPLOYEEID)
VALUES('JEFF','DaBear',10);

SELECT * FROM CUSTOMER;

INSERT INTO CUSTOMER (FIRSTNAME,LASTNAME,CUSTOMERID,EMAIL)
VALUES('JEFF','DaBear',60,'mynameisJeff@bear.com');

INSERT INTO CUSTOMER (FIRSTNAME,LASTNAME,CUSTOMERID,EMAIL)
VALUES('JEFF','DaBear JR',61,'mynameisJeffJR@bear.com');

UPDATE CUSTOMER
SET FIRSTNAME = 'Robert',LASTNAME = 'Walters'
WHERE FIRSTNAME = 'Aaron';

SELECT *FROM ARTIST;
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 and 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUNE-03' and '01-MAR-04';

DELETE FROM INVOICELINE
WHERE INVOICEID IN(
SELECT INVOICEID FROM INVOICE
    WHERE CUSTOMERID IN(SELECT CUSTOMERID FROM CUSTOMER
                        WHERE FIRSTNAME = 'Robert' and LASTNAME = 'Walter')); 
        

DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' and LASTNAME = 'Walter';
--SQL FUNCTIONS--



SELECT LENGTH(NAME) FROM MEDIATYPE;

SELECT AVG(TOTAL) FROM INVOICE;

SELECT MAX(UNITPRICE) FROM TRACK;

SELECT AVG(UNITPRICE) FROM INVOICELINE;

--4.0 STORED PROCEDURE--

CREATE OR REPLACE PROCEDURE UPDATEPROCEDURE(EMP_ID IN NUMBER, EMPUPDATE IN VARCHAR2)
IS 
BEGIN
  UPDATE EMPLOYEE SET LASTNAME = EMPUPDATE WHERE EMPLOYEEID = EMP_ID;
END;

CREATE OR REPLACE PROCEDURE WHOMYMANAGER(S OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN S FOR
  SELECT LASTNAME, REPORTSTO FROM EMPLOYEE;
END;

DECLARE
S SYS_REFCURSOR;
SOME_EMPLOYEE EMPLOYEE.LASTNAME%TYPE;
SOME_MANAGER EMPLOYEE.REPORTSTO%TYPE;
BEGIN
WHOMYMANAGER(S);

LOOP
FETCH S INTO SOME_EMPLOYEE,SOME_MANAGER;
EXIT WHEN S%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE(SOME_MANAGER||' IS '||SOME_EMPLOYEE||'S MANAGER');
END LOOP;
CLOSE S;
END;

CREATE OR REPLACE PROCEDURE CUST_COMPANY(CUST_ID IN NUMBER, MY_CURS SYS_REFCURSOR)
IS
BEGIN 
  OPEN MY_CURS FOR SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER WHERE CUSTOMERID = CUST_ID;
END;
--5.0 TRANSACTIONS

CREATE OR REPLACE PROCEDURE DELETEINVOICE(INVOICE_ID IN NUMBER)
IS
BEGIN
DELETE INVOICE WHERE INVOICEID =INVOICE_ID;
END;

INSERT INTO CUSTOMER (FIRSTNAME,LASTNAME,CUSTOMERID,EMAIL)
VALUES('JEFF','DaBear',60,'mynameisJeff@bear.com');

CREATE OR REPLACE PROCEDURE ADDCUSTOMER(FNAME IN VARCHAR2,LNAME IN VARCHAR2,CUSTOMER_ID IN INTEGER, CUSTEMAIL IN VARCHAR2)
IS 
BEGIN
INSERT INTO CUSTOMER(FIRSTNAME,LASTNAME,CUSTOMERID,EMAIL)
VALUES(FNAME,LNAME,CUSTOMER_ID,CUSTEMAIL);
END;

--6.0 TRIGGERS
CREATE OR REPLACE TRIGGER TR_EMPLOYEE_INSERT
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE
NEWEMPID NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE('NEW ID' || NEWEMPID);
END;

CREATE OR REPLACE TRIGGER TR_ALBUM_ROW_INSERT
AFTER UPDATE ON ALBUM
FOR EACH ROW
DECLARE
NEWALBUM NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE('NEW ALBUM' || NEWALBUM);
END;

CREATE OR REPLACE TRIGGER TR_AFTER_ROW_DELETE
AFTER DELETE ON CUSTOMER
FOR EACH ROW
DECLARE
ROWDELETED NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE('ROW DELETED' || ROWDELETED );
END;


--7.0 Joins 
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME
FROM INVOICE
JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;

SELECT ARTIST.NAME, ALBUM.TITLE
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY ARTIST.NAME ASC;


SELECT A.EMPLOYEEID, B.LASTNAME, A.REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO <> B.REPORTSTO;
