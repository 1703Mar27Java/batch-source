CREATE TABLE B_USER(
    USER_ID NUMBER PRIMARY KEY,
    USER_NAME VARCHAR2(200) NOT NULL,
    PASSWORD VARCHAR2(200) NOT NULL
);

CREATE TABLE B_TRANSACTION(
    TRANSACTION_ID NUMBER PRIMARY KEY,
    TRANSACTION_TYPE VARCHAR2(20) NOT NULL,
    TRANSACTION_AMOUNT NUMBER NOT NULL CHECK(TRANSACTION_AMOUNT>=0),
    CONSTRAINT FK_TRANSACTION_USER FOREIGN KEY (USER_ID) REFERENCES B_USER(USER_ID)
);

CREATE TABLE B_ACCOUNT(
    BANK_ACCOUNT_ID NUMBER PRIMARY KEY,
    USER_ID NUMBER,
    BANK_ACCOUNT_NAME VARCHAR2(200) NOT NULL,
    BANK_ACCOUNT_BALANCE NUMBER NOT NULL CHECK(BANK_BALANCE>=0),
    CONSTRAINT FK_BACCOUNT_USER FOREIGN KEY (USER_ID)  REFERENCES B_USER(USER_ID)
);

INSERT INTO B_USER VALUES (1, 'SUPER', 'password');

ALTER TABLE B_USER ADD CONSTRAINT USER_UNQIUE UNIQUE(USER_NAME);

ALTER TABLE B_TRANSACTION ADD TRANSACTION_DATE DATE;
ALTER TABLE B_TRANSACTION ADD B_ACCOUNT_ID;
ALTER TABLE B_TRANSACTION ADD CONSTRAINT FK_B_TRANSACTION_B_ACCOUNT FOREIGN KEY(B_ACCOUNT_ID)
REFERENCES B_ACCOUNT(BANK_ACCOUNT_ID) ON DELETE CASCADE;

ALTER TABLE B_ACCOUNT DROP CONSTRAINT FK_BACCOUNT_USER;

ALTER TABLE B_ACCOUNT ADD CONSTRAINT FK_BACCOUNT_USER FOREIGN KEY(USER_ID)
REFERENCES B_USER(USER_ID) ON DELETE CASCADE;

CREATE SEQUENCE SQ_USER_PK
START WITH 3
INCREMENT BY 1;

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 2
INCREMENT BY 1;

CREATE SEQUENCE SQ_TRANSACTION_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON B_USER
FOR EACH ROW
BEGIN
    SELECT SQ_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON B_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_TRANSACTION_ACCOUNT
BEFORE INSERT ON B_TRANSACTION
FOR EACH ROW
BEGIN
    SELECT SQ_TRANSACTION_PK.NEXTVAL INTO :NEW.TRANSACTION_ID FROM DUAL;
END;

CREATE OR REPLACE PROCEDURE SP_DEPOSIT(A_ID IN NUMBER, DEP_AMOUNT IN NUMBER)
IS 

BEGIN

UPDATE B_ACCOUNT
SET BANK_ACCOUNT_BALANCE = BANK_ACCOUNT_BALANCE +DEP_AMOUNT
WHERE BANK_ACCOUNT_ID = A_ID;

INSERT INTO B_TRANSACTION (TRANSACTION_TYPE, TRANSACTION_AMOUNT, TRANSACTION_DATE, B_ACCOUNT_ID) 
VALUES ('DEPOSIT', DEP_AMOUNT, SYSDATE, A_ID);

END;

CREATE OR REPLACE PROCEDURE SP_WITHDRAW(A_ID IN NUMBER, WIT_AMOUNT IN NUMBER)
IS 
BEGIN

UPDATE B_ACCOUNT
SET BANK_ACCOUNT_BALANCE = BANK_ACCOUNT_BALANCE -WIT_AMOUNT
WHERE BANK_ACCOUNT_ID = A_ID;

INSERT INTO B_TRANSACTION (TRANSACTION_TYPE, TRANSACTION_AMOUNT, TRANSACTION_DATE, B_ACCOUNT_ID) 
VALUES ('WITHDRAW', WIT_AMOUNT, SYSDATE, A_ID);

END;





