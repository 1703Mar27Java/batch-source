
/*CREATING TABLES*/

CREATE TABLE BEAR
(
    BEAR_ID       INTEGER NOT NULL,
    BEAR_NAME     VARCHAR2(160) NOT NULL,
    BEAR_TYPE_ID  NUMBER NOT NULL,
    BEAR_AGE      NUMBER NOT NULL,
    BEAR_WEIGHT   NUMBER NOT NULL,
    CAVE_ID       NUMBER NOT NULL,
    CONSTRAINT PK_BEAR    PRIMARY KEY  (BEAR_ID),
    CONSTRAINT CHK_AGE    CHECK (BEAR_AGE>0),
    CONSTRAINT CHK_WEIGHT CHECK (BEAR_WEIGHT>0)
);

CREATE TABLE BEAR_TYPE
(
  BEAR_TYPE_ID    INTEGER NOT NULL,
  BEAR_TYPE_NAME  VARCHAR2(160) NOT NULL,
  CONSTRAINT PK_BEAR_TYPE PRIMARY KEY (BEAR_TYPE_ID)
);

CREATE TABLE BEEHIVE
(
  BEEHIVE_ID      INTEGER NOT NULL,
  HIVE_WEIGHT     INTEGER DEFAULT 50 NOT NULL,
  CONSTRAINT PK_BEEHIVE PRIMARY KEY (BEEHIVE_ID)
);

CREATE TABLE CAVE
(
  CAVE_ID         INTEGER NOT NULL,
  CAVE_NAME       VARCHAR2(160) NOT NULL UNIQUE,
  MAX_BEARS       INTEGER DEFAULT 4 NOT NULL ,
  CONSTRAINT PK_CAVE PRIMARY KEY (CAVE_ID)
);

CREATE TABLE BEAR_BEEHIVE
(
  BEAR_ID         INTEGER NOT NULL,
  BEEHIVE_ID      INTEGER NOT NULL,
  CONSTRAINT PK_BEAR_BEEHIVE PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);

/*ADDING FOREIGN KEYS*/

ALTER TABLE BEAR ADD CONSTRAINT FK_BEAR_TYPE
  FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE (BEAR_TYPE_ID);

ALTER TABLE BEAR ADD CONSTRAINT FK_CAVE_ID
  FOREIGN KEY (CAVE_ID) REFERENCES CAVE (CAVE_ID);
  
ALTER TABLE BEAR_BEEHIVE ADD CONSTRAINT FK_BEAR_ID
  FOREIGN KEY (BEAR_ID) REFERENCES BEAR (BEAR_ID);
  
ALTER TABLE BEAR_BEEHIVE ADD CONSTRAINT FK_BEEHIVE_ID
  FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE (BEEHIVE_ID);
  
/*POPULATING THE TABLES*/
INSERT INTO CAVE          VALUES (1, 'POOHS HOME', 4);
INSERT INTO CAVE          VALUES (2, 'THE FOREST', DEFAULT);
INSERT INTO CAVE          VALUES (3, 'A CITY OF CAVES', 30);
INSERT INTO CAVE          VALUES (4, 'SMALL CAVE', 1);
INSERT INTO BEAR_TYPE     VALUES (1, 'FAT BEAR');
INSERT INTO BEAR_TYPE     VALUES (2, 'NOT A BEAR');
INSERT INTO BEAR_TYPE     VALUES (3, 'NICE BEAR');
INSERT INTO BEAR_TYPE     VALUES (4, 'EVIL BEAR');
INSERT INTO BEAR          VALUES (1, 'POOH', 1, 5, 20, 1);
INSERT INTO BEAR          VALUES (2, 'TIGGER', 2, 7, 25, 2);
INSERT INTO BEAR          VALUES (3, 'TEDDY', 3, 10, 21, 3);
INSERT INTO BEAR          VALUES (4, 'CTHULU', 4, 666, 666, 4);
INSERT INTO BEEHIVE       VALUES (1, DEFAULT);
INSERT INTO BEEHIVE       VALUES (2, DEFAULT);
INSERT INTO BEEHIVE       VALUES (3, DEFAULT);
INSERT INTO BEEHIVE       VALUES (4, DEFAULT);
INSERT INTO BEAR_BEEHIVE  VALUES (1, 1);
INSERT INTO BEAR_BEEHIVE  VALUES (1, 2);
INSERT INTO BEAR_BEEHIVE  VALUES (1, 3);
INSERT INTO BEAR_BEEHIVE  VALUES (2, 4);
INSERT INTO BEAR_BEEHIVE  VALUES (4, 1);
INSERT INTO BEAR_BEEHIVE  VALUES (4, 2);
INSERT INTO BEAR_BEEHIVE  VALUES (4, 3);
INSERT INTO BEAR_BEEHIVE  VALUES (4, 4);
INSERT INTO BEAR_BEEHIVE  VALUES (3, 2);


/*REMOVE ADDED DATA FROM BEAR*/
TRUNCATE TABLE BEAR_BEEHIVE;
ALTER TABLE BEAR_BEEHIVE DROP CONSTRAINT FK_BEAR_ID;
TRUNCATE TABLE BEAR;
ALTER TABLE BEAR_BEEHIVE ADD CONSTRAINT FK_BEAR_ID
  FOREIGN KEY (BEAR_ID) REFERENCES BEAR (BEAR_ID);
  
  
/*CREATING SEQUENCE*/
CREATE SEQUENCE SQ_BEAR_PK
  START WITH 1
  INCREMENT BY 2;
  
/*CREATE BEFORE INSERT TRIGGER FOR BEAR PK*/
CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
  BEFORE INSERT ON BEAR
  FOR EACH ROW
  BEGIN
    SELECT SQ_BEAR_PK.NEXTVAL INTO :NEW.BEAR_ID FROM DUAL;
    --DUAL IS A DUMMY TABLE. USED WHEN WE DONT REQUIRE A TABLE
    --BUT NEED TABLE LIKE SYNTAX
  END;
  
/*TESTING OUR NEW TRIGGER*/
INSERT INTO BEAR (BEAR_NAME, BEAR_TYPE_ID, BEAR_AGE, BEAR_WEIGHT, CAVE_ID) VALUES('DADS',1,2,2,3);
INSERT INTO BEAR (BEAR_NAME, BEAR_TYPE_ID, BEAR_AGE, BEAR_WEIGHT, CAVE_ID) VALUES('MOMS',2,3,20,3);
SELECT * FROM BEAR;

/*VIEW TO TABULATE NUMBER OF BEARS IN EACH CAVE*/
CREATE VIEW VW_BEARS_PER_CAVE (CAVE, NUMBEAR)
AS SELECT CAVE_NAME, COUNT(BEAR_ID)
FROM BEAR, CAVE
WHERE BEAR.CAVE_ID = CAVE.CAVE_ID
GROUP BY CAVE_NAME;





--Functions
CREATE OR REPLACE FUNCTION FIND_MAX_NUMBER (X IN NUMBER, Y IN NUMBER)
RETURN NUMBER
IS Z NUMBER;
BEGIN
  IF X> Y THEN
    Z:=X;
  ELSE
    Z:=Y;
  END IF;
  RETURN Z;
END;

DECLARE 
  FIRST_NUM NUMBER;
  SECOND_NUM NUMBER;
  MAX_NUM NUMBER;
BEGIN
  FIRST_NUM:=22;
  SECOND_NUM:=42;
  MAX_NUM:= FIND_MAX_NUMBER(FIRST_NUM, SECOND_NUM);
  DBMS_OUTPUT.PUT_LINE('MAX:' || MAX_NUM );
END;


--STORED PROCEDURE

CREATE OR REPLACE PROCEDURE HELLO_WORLD_PROCEDURE
IS
BEGIN
  DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;

--INVOKE PROCEDURE
BEGIN
  HELLO_WORLD_PROCEDURE();
END;


--EXAMPLE PROCEDURE WITH CURSORS
CREATE OR REPLACE PROCEDURE GET_ALL_BEARS(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S  FOR
SELECT BEAR_ID, BEAR_NAME FROM BEAR;
END;

DECLARE
  S SYS_REFCURSOR;
  SOME_ID BEAR.BEAR_ID%TYPE;
  SOME_NAME BEAR.BEAR_NAME%TYPE;
BEGIN
  GET_ALL_BEARS(S);
  LOOP
    FETCH S INTO SOME_ID, SOME_NAME;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(SOME_ID || ' IS CURRENT ID, ' || SOME_NAME || ' IS CURRENT NAME.');
  END LOOP;
  CLOSE S;
END;

CREATE OR REPLACE PROCEDURE FEED_BEAR(BEAR_NUM NUMBER, HIVE NUMBER, AMOUNT NUMBER)
IS
BEGIN
  
  UPDATE BEEHIVE SET HIVE_WEIGHT=HIVE_WEIGHT-AMOUNT WHERE BEEHIVE.BEEHIVE_ID=HIVE;
  UPDATE BEAR SET BEAR_WEIGHT=BEAR_WEIGHT+AMOUNT WHERE BEAR.BEAR_ID=BEAR_NUM;
  DBMS_OUTPUT.PUT_LINE('FED BEAR ' ||AMOUNT|| ' UNITS OF HONEY');
  COMMIT;
END;

select * from cave;
SELECT * FROM BEAR_BEEHIVE;
SELECT * FROM BEEHIVE;
SELECT * FROM BEAR;
BEGIN
FEED_BEAR(25,1,10);
END;



/*CREATING SEQUENCE*/
CREATE SEQUENCE SQ_CAVE_PK
  START WITH 8
  INCREMENT BY 1;
  
/*CREATE BEFORE INSERT TRIGGER FOR BEAR PK*/
CREATE OR REPLACE TRIGGER TR_INSERT_CAVE
  BEFORE INSERT ON CAVE
  FOR EACH ROW
  BEGIN
    SELECT SQ_CAVE_PK.NEXTVAL INTO :NEW.CAVE_ID FROM DUAL;
    --DUAL IS A DUMMY TABLE. USED WHEN WE DONT REQUIRE A TABLE
    --BUT NEED TABLE LIKE SYNTAX
  END;