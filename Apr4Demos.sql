/*THIS IS DDL*/
CREATE TABLE "PERSON" (
  P_ID NUMBER PRIMARY KEY,
  P_NAME VARCHAR2(2000),
  P_AGE INTEGER,
  P_STATE VARCHAR2(2000)
);



/*LET'S ADD SOME DATA! (DML)*/
insert into person values(1, 'john',     28, 'AZ');
insert into person values(2, 'amy',      30, 'AZ');
insert into person values(3, 'austin',   30, 'NY');
insert into person values(4, 'katie',    30, 'NY');
insert into person values(5, 'courtney', 32, 'NY');
insert into person values(6, 'scout',    32, 'NY');

/*QUERIES (DML)*/
SELECT * FROM PERSON;

SELECT P_ID, P_NAME FROM PERSON;

/*ALIASES KEYWORD "AS"
USEFUL FOR READABILITY, PULLING DATA FROM MULTIPLE TABLES, 
SUBQUERY RESULTS */
SELECT 'FIRST NAME',P_NAME FROM PERSON;

SELECT P_NAME AS FIRSTNAME, P_STATE FROM PERSON;

/*CAN USE +,-,*,/ ON NUMERIC DATATYPES, JOIN CHARACTER DATA WITH +*/
SELECT P_AGE*P_AGE AS AGESQUARED FROM PERSON;

/*GROUP BY: REDUCE ROWS TO DISTINCT VALUES*/
SELECT P_STATE FROM PERSON
GROUP BY P_STATE;

SELECT AVG(P_AGE), P_STATE FROM PERSON
GROUP BY P_STATE;

/*AGGREGATE FUNCTION (AVG, MIN, MAX, COUNT, SUM...)
PERFORMS OPERATION ON AN ENTIRE COLUMN*/

/*SCALAR FUNCTION: OPERATES ON INDIVIDUAL ENTRIES*/ 
INSERT INTO PERSON VALUES (7,'JOHN',NULL,'TX');
SELECT NVL(P_AGE,0) FROM PERSON;
SELECT UPPER(P_NAME) FROM PERSON WHERE P_NAME='amy';

/*GROUP BY VS ORDER BY*/
SELECT * FROM PERSON ORDER BY P_AGE; 
SELECT * FROM PERSON ORDER BY P_NAME;
SELECT * FROM PERSON ORDER BY P_AGE,P_STATE;

SELECT P_AGE,P_NAME FROM PERSON GROUP BY P_AGE,P_NAME ORDER BY P_AGE;

/*WHERE VS HAVING*/
SELECT * FROM PERSON WHERE P_AGE > 29; 

SELECT AVG(P_AGE) 
FROM PERSON 
GROUP BY P_STATE 
HAVING AVG(P_AGE)>29; /*HAVING IS FOR AGGREGATE FUNCTIONS 
                      AND MUST BE USED WITH GROUP BY*/ 
                      
                      
/*JOINS!*/
CREATE TABLE department(
  d_id INTEGER PRIMARY KEY,
  d_name VARCHAR2(2000)
);

CREATE TABLE employee(
  e_id INTEGER PRIMARY KEY,
  e_name VARCHAR2(2000),
  dog INTEGER,
  FOREIGN KEY (dog) REFERENCES department(d_id)
);

CREATE TABLE phone_numbers(
  p_id INTEGER PRIMARY KEY,
  p_number VARCHAR2(20),
  cat INTEGER,
  FOREIGN KEY (cat) REFERENCES employee(e_id)
);

INSERT INTO department(d_id, d_name) VALUES(1, 'sales');
INSERT INTO department(d_id, d_name) VALUES(2, 'finance');
INSERT INTO department(d_id, d_name) VALUES(3, 'marketing');

INSERT INTO employee(e_id, e_name, dog) VALUES(10, 'john',     1);
INSERT INTO employee(e_id, e_name, dog) VALUES(20, 'amy',      1);
INSERT INTO employee(e_id, e_name, dog) VALUES(30, 'austin',   2);
INSERT INTO employee(e_id, e_name, dog) VALUES(40, 'katie',    2);
INSERT INTO employee(e_id, e_name, dog) VALUES(50, 'courtney', 2);
INSERT INTO employee(e_id, e_name) VALUES(60, 'scout');

INSERT INTO phone_numbers(p_id, p_number, cat) VALUES(100, '0000001111', 10);
INSERT INTO phone_numbers(p_id, p_number, cat) VALUES(101, '0000002222', 10);
INSERT INTO phone_numbers(p_id, p_number, cat) VALUES(102, '0000003333', 20);

SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM PHONE_NUMBERS;

SELECT * FROM DEPARTMENT INNER JOIN EMPLOYEE ON DOG = D_ID;

/*ANOTHER KIND OF ALIAS*/
SELECT EMP.E_NAME, DEPT.D_NAME
FROM DEPARTMENT DEPT 
INNER JOIN EMPLOYEE EMP
ON EMP.DOG = DEPT.D_ID;

SELECT E_NAME, D_NAME FROM DEPARTMENT 
LEFT JOIN EMPLOYEE ON DOG = D_ID;

/*JOIN ALL TABLES: EVERYONE IN SALES WITH A PHONE NUMBER*/
SELECT E_NAME PERSONNAME, P_NUMBER PHONENUM
FROM DEPARTMENT 
INNER JOIN EMPLOYEE ON DOG = D_ID
INNER JOIN PHONE_NUMBERS ON CAT = E_ID
WHERE D_NAME = 'sales';

SELECT *
FROM DEPARTMENT 
INNER JOIN EMPLOYEE ON DOG = D_ID
INNER JOIN PHONE_NUMBERS ON CAT = E_ID
WHERE D_NAME = 'sales';