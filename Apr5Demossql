--CREATE TABLES
CREATE TABLE BEAR (
  BEAR_ID INTEGER PRIMARY KEY,
  BEAR_TYPE_ID INTEGER, 
  BEAR_NAME VARCHAR2(100),
  BEAR_AGE INTEGER,
  BEAR_WEIGHT INTEGER DEFAULT 200,
  CAVE_ID INTEGER
);

CREATE TABLE BEAR_TYPE (
  BEAR_TYPE_ID INTEGER PRIMARY KEY,
  BEAR_TYPE_NAME VARCHAR2(100)
);

CREATE TABLE CAVE (
  CAVE_ID INTEGER PRIMARY KEY,
  CAVE_NAME VARCHAR2(100),
  MAX_BEARS INTEGER DEFAULT 4
);

CREATE TABLE BEEHIVE (
  BEEHIVE_ID INTEGER PRIMARY KEY,
  BEEHIVE_WEIGHT INTEGER DEFAULT 50
);

CREATE TABLE BEAR_BEEHIVE (
  BEAR_ID INTEGER,
  BEEHIVE_ID INTEGER,
  PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);

--ADD FOREIGN KEY CONSTRAINTS
ALTER TABLE BEAR 
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE (BEAR_TYPE_ID);

ALTER TABLE BEAR 
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE (CAVE_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY (BEAR_ID) REFERENCES BEAR (BEAR_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE (BEEHIVE_ID);

--ADD CONSTRAINTS TO KEEP AGES, WEIGHTS POSITIVE
ALTER TABLE BEAR 
ADD CONSTRAINT CK_AGE_POSITIVE CHECK (BEAR_AGE > 0);

ALTER TABLE BEAR 
ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE CHECK (BEAR_WEIGHT > 0);

ALTER TABLE BEEHIVE 
ADD CONSTRAINT CK_HIVE_WEIGHT_POSITIVE CHECK (BEEHIVE_WEIGHT > 0);

--ADD UNIQUE CONSTRAINT ON CAVE NAME
ALTER TABLE CAVE
ADD CONSTRAINT UQ_CAVE_NAME UNIQUE (CAVE_NAME);

--INSERT SOME DATA
INSERT INTO BEAR_TYPE VALUES (1,'grizzly');
INSERT INTO BEAR_TYPE VALUES (2,'polar');
INSERT INTO BEAR_TYPE VALUES (3,'panda');

INSERT INTO CAVE (CAVE_ID, CAVE_NAME) VALUES (1,'SUPER COOL CAVE');
INSERT INTO CAVE VALUES (2,'ALSO A SUPER COOL CAVE',7);

INSERT INTO BEEHIVE VALUES (1,35);
INSERT INTO BEEHIVE VALUES (2, DEFAULT);

INSERT INTO BEAR VALUES (1,2,'Paddington',5,DEFAULT,1);

INSERT INTO BEAR_BEEHIVE VALUES (1,2);
INSERT INTO BEAR_BEEHIVE VALUES (1,1);

--REMOVE BEARS DATA 
TRUNCATE TABLE BEAR_BEEHIVE;
TRUNCATE TABLE BEAR;

ALTER TABLE BEAR_BEEHIVE DROP CONSTRAINT FK_BEAR_BEEHIVE_BEAR;

--CREATE SEQUENCE FOR BEAR PRIMARY KEYS
CREATE SEQUENCE SQ_BEAR_PK
START WITH 1
INCREMENT BY 2;

--CREATE BEFORE INSERT TRIGGER FOR BEAR PRIMARY KEYS
CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
BEFORE INSERT ON BEAR
FOR EACH ROW
BEGIN
  SELECT SQ_BEAR_PK.NEXTVAL INTO :NEW.BEAR_ID FROM DUAL;
    --DUAL IS A DUMMY TABLE. USE IT WHEN YOU DON'T REQUIRE A TABLE
    --BUT NEED TABLE-LIKE SYNTAX. 
END;

INSERT INTO BEAR (BEAR_NAME, BEAR_TYPE_ID, BEAR_AGE, CAVE_ID) 
VALUES ('JEFF',1,4,2);
INSERT INTO BEAR (BEAR_NAME, BEAR_TYPE_ID, BEAR_AGE, CAVE_ID) 
VALUES ('REGINALD',1,7,1);

--CREATE VIEW TO SHOW HOW MANY BEARS PER CAVE 
CREATE VIEW VW_BEARS_PER_CAVE (CAVE, NUMBEAR)
AS SELECT CAVE_NAME, COUNT(BEAR_ID)
  FROM BEAR, CAVE 
  WHERE BEAR.CAVE_ID = CAVE.CAVE_ID
  GROUP BY CAVE_NAME;

SELECT * FROM VW_BEARS_PER_CAVE;

--STORED PROCEDURE TO FEED BEAR 
INSERT INTO BEAR_BEEHIVE VALUES (1,1);
INSERT INTO BEAR_BEEHIVE VALUES (1,2);
INSERT INTO BEAR_BEEHIVE VALUES (3,1);
INSERT INTO BEAR_BEEHIVE VALUES (3,2);
INSERT INTO BEEHIVE VALUES (3,DEFAULT);
INSERT INTO BEEHIVE VALUES (4,DEFAULT);
INSERT INTO BEAR_BEEHIVE VALUES (1,3);
INSERT INTO BEAR_BEEHIVE VALUES (1,4);
INSERT INTO BEAR_BEEHIVE VALUES (3,3);
INSERT INTO BEAR_BEEHIVE VALUES (3,4);

DECLARE
  --VARIABLES TO USE IN THE TRANSACTION
  PAIRS NUMBER;
  MAX_PAIRS CONSTANT NUMBER := 3; --ASSIGNMENT. MAXIMUM NUMBER OF BEAR/BEEHIVE 
BEGIN                                 --PAIRS WE'RE WILLING TO REMOVE. 
    PAIRS INTEGER := SELECT COUNT(*) FROM BEAR_BEEHIVE WHERE BEAR_ID = 1;
    DELETE FROM BEAR_BEEHIVE WHERE BEAR_ID = 1;
     IF PAIRS > MAX_PAIRS 
      THEN
        ROLLBACK;
    END IF; 
END;
--CREATE FUNCTION TO CALCULATE HOW MANY BEARS IN A CAVE 
